
ors-dn3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d04  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004e90  08004e90  00014e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00014ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000005d0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000644  20000644  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af5c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018a9  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000990  00000000  00000000  0002d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a04  00000000  00000000  0002dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b3c7  00000000  00000000  0004e674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9f05  00000000  00000000  00059a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00123940  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea8  00000000  00000000  00123994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e74 	.word	0x08004e74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004e74 	.word	0x08004e74

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 b96e 	b.w	8000d94 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468c      	mov	ip, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8083 	bne.w	8000be6 <__udivmoddi4+0x116>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4617      	mov	r7, r2
 8000ae4:	d947      	bls.n	8000b76 <__udivmoddi4+0xa6>
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	b142      	cbz	r2, 8000afe <__udivmoddi4+0x2e>
 8000aec:	f1c2 0020 	rsb	r0, r2, #32
 8000af0:	fa24 f000 	lsr.w	r0, r4, r0
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4097      	lsls	r7, r2
 8000af8:	ea40 0c01 	orr.w	ip, r0, r1
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	0c23      	lsrs	r3, r4, #16
 8000b04:	fbbc f6f8 	udiv	r6, ip, r8
 8000b08:	fa1f fe87 	uxth.w	lr, r7
 8000b0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b14:	fb06 f10e 	mul.w	r1, r6, lr
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x60>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 8119 	bcs.w	8000d58 <__udivmoddi4+0x288>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 8116 	bls.w	8000d58 <__udivmoddi4+0x288>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x8c>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8105 	bcs.w	8000d5c <__udivmoddi4+0x28c>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f240 8102 	bls.w	8000d5c <__udivmoddi4+0x28c>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b60:	eba4 040e 	sub.w	r4, r4, lr
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa0>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xaa>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d150      	bne.n	8000c24 <__udivmoddi4+0x154>
 8000b82:	1bcb      	subs	r3, r1, r7
 8000b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b88:	fa1f f887 	uxth.w	r8, r7
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b92:	0c21      	lsrs	r1, r4, #16
 8000b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xe4>
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0xe2>
 8000bac:	428b      	cmp	r3, r1
 8000bae:	f200 80e9 	bhi.w	8000d84 <__udivmoddi4+0x2b4>
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc4:	fb08 f800 	mul.w	r8, r8, r0
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0x10c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x10a>
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	f200 80d9 	bhi.w	8000d8c <__udivmoddi4+0x2bc>
 8000bda:	4618      	mov	r0, r3
 8000bdc:	eba4 0408 	sub.w	r4, r4, r8
 8000be0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be4:	e7bf      	b.n	8000b66 <__udivmoddi4+0x96>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x12e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <__udivmoddi4+0x282>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x1cc>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0x140>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80b8 	bhi.w	8000d80 <__udivmoddi4+0x2b0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0103 	sbc.w	r1, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0a8      	beq.n	8000b70 <__udivmoddi4+0xa0>
 8000c1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f603 	lsr.w	r6, r0, r3
 8000c2c:	4097      	lsls	r7, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4330      	orrs	r0, r6
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f108 	mul.w	r1, r6, r8
 8000c50:	4299      	cmp	r1, r3
 8000c52:	fa04 f402 	lsl.w	r4, r4, r2
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x19c>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 808d 	bcs.w	8000d7c <__udivmoddi4+0x2ac>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 808a 	bls.w	8000d7c <__udivmoddi4+0x2ac>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b281      	uxth	r1, r0
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb00 f308 	mul.w	r3, r0, r8
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1c4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c8a:	d273      	bcs.n	8000d74 <__udivmoddi4+0x2a4>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d971      	bls.n	8000d74 <__udivmoddi4+0x2a4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4439      	add	r1, r7
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9a:	e778      	b.n	8000b8e <__udivmoddi4+0xbe>
 8000c9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	0c3b      	lsrs	r3, r7, #16
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fa1f f884 	uxth.w	r8, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cce:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x220>
 8000cde:	1861      	adds	r1, r4, r1
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	d248      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	d946      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4421      	add	r1, r4
 8000cf0:	eba1 010a 	sub.w	r1, r1, sl
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d02:	fb00 f808 	mul.w	r8, r0, r8
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x24a>
 8000d0a:	19e7      	adds	r7, r4, r7
 8000d0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d10:	d22e      	bcs.n	8000d70 <__udivmoddi4+0x2a0>
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d92c      	bls.n	8000d70 <__udivmoddi4+0x2a0>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4427      	add	r7, r4
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	eba7 0708 	sub.w	r7, r7, r8
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	454f      	cmp	r7, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	d31a      	bcc.n	8000d64 <__udivmoddi4+0x294>
 8000d2e:	d017      	beq.n	8000d60 <__udivmoddi4+0x290>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x27a>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3e:	40f2      	lsrs	r2, r6
 8000d40:	ea4c 0202 	orr.w	r2, ip, r2
 8000d44:	40f7      	lsrs	r7, r6
 8000d46:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	462e      	mov	r6, r5
 8000d54:	4628      	mov	r0, r5
 8000d56:	e70b      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	e6e9      	b.n	8000b30 <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fd      	b.n	8000b5c <__udivmoddi4+0x8c>
 8000d60:	4543      	cmp	r3, r8
 8000d62:	d2e5      	bcs.n	8000d30 <__udivmoddi4+0x260>
 8000d64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d68:	eb69 0104 	sbc.w	r1, r9, r4
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	e7df      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7d2      	b.n	8000d1a <__udivmoddi4+0x24a>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e78d      	b.n	8000c94 <__udivmoddi4+0x1c4>
 8000d78:	4681      	mov	r9, r0
 8000d7a:	e7b9      	b.n	8000cf0 <__udivmoddi4+0x220>
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	e775      	b.n	8000c6c <__udivmoddi4+0x19c>
 8000d80:	4630      	mov	r0, r6
 8000d82:	e74a      	b.n	8000c1a <__udivmoddi4+0x14a>
 8000d84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d88:	4439      	add	r1, r7
 8000d8a:	e713      	b.n	8000bb4 <__udivmoddi4+0xe4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	e724      	b.n	8000bdc <__udivmoddi4+0x10c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <func>:


extern  int cnt1;
extern int cnt2;

void func(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af02      	add	r7, sp, #8


	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	488d      	ldr	r0, [pc, #564]	; (8000fd8 <func+0x240>)
 8000da4:	f001 fed6 	bl	8002b54 <HAL_GPIO_WritePin>
			 out = 0x29 | 0x80; // 0xa9
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <func+0x244>)
 8000daa:	22a9      	movs	r2, #169	; 0xa9
 8000dac:	701a      	strb	r2, [r3, #0]
			 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	4a8a      	ldr	r2, [pc, #552]	; (8000fe0 <func+0x248>)
 8000db8:	4988      	ldr	r1, [pc, #544]	; (8000fdc <func+0x244>)
 8000dba:	488a      	ldr	r0, [pc, #552]	; (8000fe4 <func+0x24c>)
 8000dbc:	f000 fd7d 	bl	80018ba <HAL_SPI_TransmitReceive>
			 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4a85      	ldr	r2, [pc, #532]	; (8000fe0 <func+0x248>)
 8000dca:	4984      	ldr	r1, [pc, #528]	; (8000fdc <func+0x244>)
 8000dcc:	4885      	ldr	r0, [pc, #532]	; (8000fe4 <func+0x24c>)
 8000dce:	f000 fd74 	bl	80018ba <HAL_SPI_TransmitReceive>
			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4880      	ldr	r0, [pc, #512]	; (8000fd8 <func+0x240>)
 8000dd8:	f001 febc 	bl	8002b54 <HAL_GPIO_WritePin>

			 Ax[cnt1]=abs(in);
 8000ddc:	4b82      	ldr	r3, [pc, #520]	; (8000fe8 <func+0x250>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a7f      	ldr	r2, [pc, #508]	; (8000fe0 <func+0x248>)
 8000de2:	7811      	ldrb	r1, [r2, #0]
 8000de4:	4a81      	ldr	r2, [pc, #516]	; (8000fec <func+0x254>)
 8000de6:	54d1      	strb	r1, [r2, r3]



			 // beri naklon po y osi -> Naslov 0x2B
			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2108      	movs	r1, #8
 8000dec:	487a      	ldr	r0, [pc, #488]	; (8000fd8 <func+0x240>)
 8000dee:	f001 feb1 	bl	8002b54 <HAL_GPIO_WritePin>
			 out = 0x2B | 0x80; // 0xaB
 8000df2:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <func+0x244>)
 8000df4:	22ab      	movs	r2, #171	; 0xab
 8000df6:	701a      	strb	r2, [r3, #0]
			 HAL_SPI_TransmitReceive(&hspi1, &out, &in2, 1, HAL_MAX_DELAY);
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	4a7b      	ldr	r2, [pc, #492]	; (8000ff0 <func+0x258>)
 8000e02:	4976      	ldr	r1, [pc, #472]	; (8000fdc <func+0x244>)
 8000e04:	4877      	ldr	r0, [pc, #476]	; (8000fe4 <func+0x24c>)
 8000e06:	f000 fd58 	bl	80018ba <HAL_SPI_TransmitReceive>
			 HAL_SPI_TransmitReceive(&hspi1, &out, &in2, 1, HAL_MAX_DELAY);
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	4a77      	ldr	r2, [pc, #476]	; (8000ff0 <func+0x258>)
 8000e14:	4971      	ldr	r1, [pc, #452]	; (8000fdc <func+0x244>)
 8000e16:	4873      	ldr	r0, [pc, #460]	; (8000fe4 <func+0x24c>)
 8000e18:	f000 fd4f 	bl	80018ba <HAL_SPI_TransmitReceive>
			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2108      	movs	r1, #8
 8000e20:	486d      	ldr	r0, [pc, #436]	; (8000fd8 <func+0x240>)
 8000e22:	f001 fe97 	bl	8002b54 <HAL_GPIO_WritePin>

			 Ay[cnt1]=abs(in2);
 8000e26:	4b70      	ldr	r3, [pc, #448]	; (8000fe8 <func+0x250>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a71      	ldr	r2, [pc, #452]	; (8000ff0 <func+0x258>)
 8000e2c:	7811      	ldrb	r1, [r2, #0]
 8000e2e:	4a71      	ldr	r2, [pc, #452]	; (8000ff4 <func+0x25c>)
 8000e30:	54d1      	strb	r1, [r2, r3]





			 cnt1++;
 8000e32:	4b6d      	ldr	r3, [pc, #436]	; (8000fe8 <func+0x250>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a6b      	ldr	r2, [pc, #428]	; (8000fe8 <func+0x250>)
 8000e3a:	6013      	str	r3, [r2, #0]

			 if(cnt1>=80){
 8000e3c:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <func+0x250>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b4f      	cmp	r3, #79	; 0x4f
 8000e42:	dd2c      	ble.n	8000e9e <func+0x106>
				 //vsake 4 sekunde DMA prenos




				 HAL_DMA_PollForTransfer(&dma, HAL_DMA_FULL_TRANSFER,
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e48:	2100      	movs	r1, #0
 8000e4a:	486b      	ldr	r0, [pc, #428]	; (8000ff8 <func+0x260>)
 8000e4c:	f001 fb27 	bl	800249e <HAL_DMA_PollForTransfer>
				 	HAL_MAX_DELAY);
				 HAL_DMA_Start(&dma, Ax, &B[cnt2 * 80],
 8000e50:	4966      	ldr	r1, [pc, #408]	; (8000fec <func+0x254>)
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <func+0x264>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b67      	ldr	r3, [pc, #412]	; (8001000 <func+0x268>)
 8000e62:	4413      	add	r3, r2
 8000e64:	461a      	mov	r2, r3
 8000e66:	2350      	movs	r3, #80	; 0x50
 8000e68:	4863      	ldr	r0, [pc, #396]	; (8000ff8 <func+0x260>)
 8000e6a:	f001 fa6d 	bl	8002348 <HAL_DMA_Start>
					//		 	HAL_MAX_DELAY);




				 HAL_DMA_Start(&dma, Ay,
 8000e6e:	4961      	ldr	r1, [pc, #388]	; (8000ff4 <func+0x25c>)


				 			&B[400 + (80 * cnt2)],80*sizeof(uint8_t));
 8000e70:	4b62      	ldr	r3, [pc, #392]	; (8000ffc <func+0x264>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8000e80:	4a5f      	ldr	r2, [pc, #380]	; (8001000 <func+0x268>)
 8000e82:	4413      	add	r3, r2
				 HAL_DMA_Start(&dma, Ay,
 8000e84:	461a      	mov	r2, r3
 8000e86:	2350      	movs	r3, #80	; 0x50
 8000e88:	485b      	ldr	r0, [pc, #364]	; (8000ff8 <func+0x260>)
 8000e8a:	f001 fa5d 	bl	8002348 <HAL_DMA_Start>
				 //HAL_DMA_Start(&dma,(uint32_t)&Ay,(uint32_t)&B,80*8);




				 cnt1=0;
 8000e8e:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <func+0x250>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
				 cnt2++;
 8000e94:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <func+0x264>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a58      	ldr	r2, [pc, #352]	; (8000ffc <func+0x264>)
 8000e9c:	6013      	str	r3, [r2, #0]




			 }
			 if(cnt2>=5)
 8000e9e:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <func+0x264>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	f340 8090 	ble.w	8000fc8 <func+0x230>

			 {
				 //izracnaj povprecje

				 cnt2=0;
 8000ea8:	4b54      	ldr	r3, [pc, #336]	; (8000ffc <func+0x264>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]


				 double average, variance, std_deviation, sum_two = 0;
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

				 	uint32_t sum = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
				 	// compute avg
				 	for (int32_t i = 0; i < 800; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
 8000ec2:	e00a      	b.n	8000eda <func+0x142>
				 		sum += (uint32_t) B[i];
 8000ec4:	4a4e      	ldr	r2, [pc, #312]	; (8001000 <func+0x268>)
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	4413      	add	r3, r2
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
				 	for (int32_t i = 0; i < 800; i++) {
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ee0:	dbf0      	blt.n	8000ec4 <func+0x12c>
				 	}

				 	average = sum / 400.0;
 8000ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ee4:	f7ff fab2 	bl	800044c <__aeabi_ui2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b45      	ldr	r3, [pc, #276]	; (8001004 <func+0x26c>)
 8000eee:	f7ff fc51 	bl	8000794 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9c7 2304 	strd	r2, r3, [r7, #16]

				 	// Compute  variance  and standard deviation
				 	for (int32_t i = 0; i < 800; i++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	e023      	b.n	8000f48 <func+0x1b0>
				 		sum_two += pow((((uint32_t)B[i]) - average), 2);
 8000f00:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <func+0x268>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa9f 	bl	800044c <__aeabi_ui2d>
 8000f0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f12:	f7ff f95d 	bl	80001d0 <__aeabi_dsub>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	ec43 2b17 	vmov	d7, r2, r3
 8000f1e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8000fd0 <func+0x238>
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	eef0 0a67 	vmov.f32	s1, s15
 8000f2a:	f002 ffbb 	bl	8003ea4 <pow>
 8000f2e:	ec53 2b10 	vmov	r2, r3, d0
 8000f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f36:	f7ff f94d 	bl	80001d4 <__adddf3>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				 	for (int32_t i = 0; i < 800; i++) {
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3301      	adds	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f4e:	dbd7      	blt.n	8000f00 <func+0x168>
				 	}
				 	variance = sum_two / 400.0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <func+0x26c>)
 8000f56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f5a:	f7ff fc1b 	bl	8000794 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	e9c7 2302 	strd	r2, r3, [r7, #8]
				 	std_deviation = sqrt(variance);
 8000f66:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f6a:	f003 f849 	bl	8004000 <sqrt>
 8000f6e:	ed87 0b00 	vstr	d0, [r7]




				 	if (std_deviation > 20 ){
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <func+0x270>)
 8000f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f7c:	f7ff fd70 	bl	8000a60 <__aeabi_dcmpgt>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d010      	beq.n	8000fa8 <func+0x210>


				 		__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_1, 50 );
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <func+0x274>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2232      	movs	r2, #50	; 0x32
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_3, 50 );
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <func+0x274>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_2, 50 );
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <func+0x274>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2232      	movs	r2, #50	; 0x32
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_4, 50 );
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <func+0x274>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2232      	movs	r2, #50	; 0x32
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40





}
 8000fa6:	e00f      	b.n	8000fc8 <func+0x230>
				 		__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_1, 0);
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <func+0x274>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_3, 0);
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <func+0x274>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_2, 0);
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <func+0x274>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	639a      	str	r2, [r3, #56]	; 0x38
				 			__HAL_TIM_SET_COMPARE(&timer, TIM_CHANNEL_4, 0);
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <func+0x274>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40000000 	.word	0x40000000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	200001bc 	.word	0x200001bc
 8000fe0:	20000128 	.word	0x20000128
 8000fe4:	200005e8 	.word	0x200005e8
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	20000598 	.word	0x20000598
 8000ff0:	20000594 	.word	0x20000594
 8000ff4:	200001c0 	.word	0x200001c0
 8000ff8:	20000098 	.word	0x20000098
 8000ffc:	20000094 	.word	0x20000094
 8001000:	20000210 	.word	0x20000210
 8001004:	40790000 	.word	0x40790000
 8001008:	40340000 	.word	0x40340000
 800100c:	2000012c 	.word	0x2000012c

08001010 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b09a      	sub	sp, #104	; 0x68
 8001014:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001016:	f000 ff41 	bl	8001e9c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800101a:	f000 f9c5 	bl	80013a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800101e:	f000 fa2d 	bl	800147c <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */



		     __DMA2_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4baa      	ldr	r3, [pc, #680]	; (80012d0 <main+0x2c0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4aa9      	ldr	r2, [pc, #676]	; (80012d0 <main+0x2c0>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4ba7      	ldr	r3, [pc, #668]	; (80012d0 <main+0x2c0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]

		     DMA_InitStruct.Channel=DMA_CHANNEL_0; //mem to mem periph je source pri m2m
 800103e:	4ba5      	ldr	r3, [pc, #660]	; (80012d4 <main+0x2c4>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

		     DMA_InitStruct.Direction  = DMA_MEMORY_TO_MEMORY;
 8001044:	4ba3      	ldr	r3, [pc, #652]	; (80012d4 <main+0x2c4>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	605a      	str	r2, [r3, #4]

		     DMA_InitStruct.PeriphInc = DMA_PINC_ENABLE;
 800104a:	4ba2      	ldr	r3, [pc, #648]	; (80012d4 <main+0x2c4>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	609a      	str	r2, [r3, #8]

		     DMA_InitStruct.MemInc = DMA_MINC_ENABLE; //increment
 8001052:	4ba0      	ldr	r3, [pc, #640]	; (80012d4 <main+0x2c4>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	60da      	str	r2, [r3, #12]

		     DMA_InitStruct.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105a:	4b9e      	ldr	r3, [pc, #632]	; (80012d4 <main+0x2c4>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
		     DMA_InitStruct.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001060:	4b9c      	ldr	r3, [pc, #624]	; (80012d4 <main+0x2c4>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]

		     DMA_InitStruct.Mode = DMA_NORMAL;//v
 8001066:	4b9b      	ldr	r3, [pc, #620]	; (80012d4 <main+0x2c4>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]

		     DMA_InitStruct.Priority = DMA_PRIORITY_MEDIUM;
 800106c:	4b99      	ldr	r3, [pc, #612]	; (80012d4 <main+0x2c4>)
 800106e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001072:	61da      	str	r2, [r3, #28]

		     DMA_InitStruct.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001074:	4b97      	ldr	r3, [pc, #604]	; (80012d4 <main+0x2c4>)
 8001076:	2204      	movs	r2, #4
 8001078:	621a      	str	r2, [r3, #32]
		     DMA_InitStruct.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800107a:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <main+0x2c4>)
 800107c:	2203      	movs	r2, #3
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
		     DMA_InitStruct.MemBurst = DMA_MBURST_SINGLE;
 8001080:	4b94      	ldr	r3, [pc, #592]	; (80012d4 <main+0x2c4>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
		     DMA_InitStruct.PeriphBurst = DMA_PBURST_SINGLE;
 8001086:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <main+0x2c4>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c

		     dma.Instance = DMA2_Stream0;
 800108c:	4b92      	ldr	r3, [pc, #584]	; (80012d8 <main+0x2c8>)
 800108e:	4a93      	ldr	r2, [pc, #588]	; (80012dc <main+0x2cc>)
 8001090:	601a      	str	r2, [r3, #0]
		     dma.Init=DMA_InitStruct;
 8001092:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <main+0x2c8>)
 8001094:	4a8f      	ldr	r2, [pc, #572]	; (80012d4 <main+0x2c4>)
 8001096:	1d1c      	adds	r4, r3, #4
 8001098:	4615      	mov	r5, r2
 800109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


		     HAL_DMA_Init(&dma);
 80010aa:	488b      	ldr	r0, [pc, #556]	; (80012d8 <main+0x2c8>)
 80010ac:	f001 f89e 	bl	80021ec <HAL_DMA_Init>




	__HAL_RCC_SPI1_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <main+0x2c0>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	4a85      	ldr	r2, [pc, #532]	; (80012d0 <main+0x2c0>)
 80010ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010be:	6453      	str	r3, [r2, #68]	; 0x44
 80010c0:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <main+0x2c0>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]

	      hspi1.Instance = SPI1;
 80010cc:	4b84      	ldr	r3, [pc, #528]	; (80012e0 <main+0x2d0>)
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <main+0x2d4>)
 80010d0:	601a      	str	r2, [r3, #0]
	      hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b83      	ldr	r3, [pc, #524]	; (80012e0 <main+0x2d0>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
	      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b81      	ldr	r3, [pc, #516]	; (80012e0 <main+0x2d0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
	      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b7f      	ldr	r3, [pc, #508]	; (80012e0 <main+0x2d0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
	      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <main+0x2d0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
	      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b7c      	ldr	r3, [pc, #496]	; (80012e0 <main+0x2d0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
	      hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b7b      	ldr	r3, [pc, #492]	; (80012e0 <main+0x2d0>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
	      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010fa:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <main+0x2d0>)
 80010fc:	2238      	movs	r2, #56	; 0x38
 80010fe:	61da      	str	r2, [r3, #28]
	      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b77      	ldr	r3, [pc, #476]	; (80012e0 <main+0x2d0>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
	      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <main+0x2d0>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
	      HAL_SPI_Init(&hspi1);
 800110c:	4874      	ldr	r0, [pc, #464]	; (80012e0 <main+0x2d0>)
 800110e:	f000 fb41 	bl	8001794 <HAL_SPI_Init>

	      __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <main+0x2c0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a6d      	ldr	r2, [pc, #436]	; (80012d0 <main+0x2c0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <main+0x2c0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

	        GPIO_InitTypeDef init_structure;
	        init_structure.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 800112e:	23e0      	movs	r3, #224	; 0xe0
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
	        init_structure.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	657b      	str	r3, [r7, #84]	; 0x54
	        init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	65bb      	str	r3, [r7, #88]	; 0x58
	        init_structure.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	653b      	str	r3, [r7, #80]	; 0x50
	        init_structure.Alternate = GPIO_AF5_SPI1;
 800113e:	2305      	movs	r3, #5
 8001140:	65fb      	str	r3, [r7, #92]	; 0x5c
	        HAL_GPIO_Init(GPIOA, &init_structure);
 8001142:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001146:	4619      	mov	r1, r3
 8001148:	4867      	ldr	r0, [pc, #412]	; (80012e8 <main+0x2d8>)
 800114a:	f001 fb67 	bl	800281c <HAL_GPIO_Init>


	    __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b5f      	ldr	r3, [pc, #380]	; (80012d0 <main+0x2c0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a5e      	ldr	r2, [pc, #376]	; (80012d0 <main+0x2c0>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <main+0x2c0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
	  	init_structure.Pin = GPIO_PIN_3;
 800116a:	2308      	movs	r3, #8
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	init_structure.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	657b      	str	r3, [r7, #84]	; 0x54
	  	init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	65bb      	str	r3, [r7, #88]	; 0x58
	  	init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	653b      	str	r3, [r7, #80]	; 0x50
	  	HAL_GPIO_Init(GPIOE, &init_structure);
 800117a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800117e:	4619      	mov	r1, r3
 8001180:	485a      	ldr	r0, [pc, #360]	; (80012ec <main+0x2dc>)
 8001182:	f001 fb4b 	bl	800281c <HAL_GPIO_Init>
	  	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	2108      	movs	r1, #8
 800118a:	4858      	ldr	r0, [pc, #352]	; (80012ec <main+0x2dc>)
 800118c:	f001 fce2 	bl	8002b54 <HAL_GPIO_WritePin>

	  	 // slave deselect
	  		           HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2108      	movs	r1, #8
 8001194:	4855      	ldr	r0, [pc, #340]	; (80012ec <main+0x2dc>)
 8001196:	f001 fcdd 	bl	8002b54 <HAL_GPIO_WritePin>
	  		           out = 0x8F;
 800119a:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <main+0x2e0>)
 800119c:	228f      	movs	r2, #143	; 0x8f
 800119e:	701a      	strb	r2, [r3, #0]
	  		           HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <main+0x2e4>)
 80011aa:	4951      	ldr	r1, [pc, #324]	; (80012f0 <main+0x2e0>)
 80011ac:	484c      	ldr	r0, [pc, #304]	; (80012e0 <main+0x2d0>)
 80011ae:	f000 fb84 	bl	80018ba <HAL_SPI_TransmitReceive>
	  		           HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <main+0x2e4>)
 80011bc:	494c      	ldr	r1, [pc, #304]	; (80012f0 <main+0x2e0>)
 80011be:	4848      	ldr	r0, [pc, #288]	; (80012e0 <main+0x2d0>)
 80011c0:	f000 fb7b 	bl	80018ba <HAL_SPI_TransmitReceive>
	  		           HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2108      	movs	r1, #8
 80011c8:	4848      	ldr	r0, [pc, #288]	; (80012ec <main+0x2dc>)
 80011ca:	f001 fcc3 	bl	8002b54 <HAL_GPIO_WritePin>

	  		           HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2108      	movs	r1, #8
 80011d2:	4846      	ldr	r0, [pc, #280]	; (80012ec <main+0x2dc>)
 80011d4:	f001 fcbe 	bl	8002b54 <HAL_GPIO_WritePin>
	  		           out = 0x20;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <main+0x2e0>)
 80011da:	2220      	movs	r2, #32
 80011dc:	701a      	strb	r2, [r3, #0]
	  		           HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <main+0x2e4>)
 80011e8:	4941      	ldr	r1, [pc, #260]	; (80012f0 <main+0x2e0>)
 80011ea:	483d      	ldr	r0, [pc, #244]	; (80012e0 <main+0x2d0>)
 80011ec:	f000 fb65 	bl	80018ba <HAL_SPI_TransmitReceive>
	  		           out = 0x47;
 80011f0:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <main+0x2e0>)
 80011f2:	2247      	movs	r2, #71	; 0x47
 80011f4:	701a      	strb	r2, [r3, #0]
	  		           HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <main+0x2e4>)
 8001200:	493b      	ldr	r1, [pc, #236]	; (80012f0 <main+0x2e0>)
 8001202:	4837      	ldr	r0, [pc, #220]	; (80012e0 <main+0x2d0>)
 8001204:	f000 fb59 	bl	80018ba <HAL_SPI_TransmitReceive>
	  		           HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2108      	movs	r1, #8
 800120c:	4837      	ldr	r0, [pc, #220]	; (80012ec <main+0x2dc>)
 800120e:	f001 fca1 	bl	8002b54 <HAL_GPIO_WritePin>

	  		         HAL_Delay(500);
 8001212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001216:	f000 feb3 	bl	8001f80 <HAL_Delay>


	  		       __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <main+0x2c0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a2b      	ldr	r2, [pc, #172]	; (80012d0 <main+0x2c0>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <main+0x2c0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
	  		         // init leds
	  		         GPIO_InitTypeDef leds;
	  		         leds.Pin =  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001236:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
	  		         leds.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  		         leds.Alternate = GPIO_AF2_TIM4;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
	  		         leds.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
	  		         leds.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	647b      	str	r3, [r7, #68]	; 0x44

	  		         HAL_GPIO_Init(GPIOD,&leds);
 800124c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001250:	4619      	mov	r1, r3
 8001252:	4829      	ldr	r0, [pc, #164]	; (80012f8 <main+0x2e8>)
 8001254:	f001 fae2 	bl	800281c <HAL_GPIO_Init>

	  		       __HAL_RCC_TIM4_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <main+0x2c0>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <main+0x2c0>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <main+0x2c0>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]


	  		        timer.Instance = TIM4;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <main+0x2ec>)
 8001276:	4a22      	ldr	r2, [pc, #136]	; (8001300 <main+0x2f0>)
 8001278:	601a      	str	r2, [r3, #0]
	  		        timer.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <main+0x2ec>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
	  		        timer.Init.Period = 50 - 1; // 5 ms P = (ARR+1)*(1/(Clk_Freq/(Prescaler+1))
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <main+0x2ec>)
 8001282:	2231      	movs	r2, #49	; 0x31
 8001284:	60da      	str	r2, [r3, #12]
	  		        timer.Init.Prescaler = 1600 - 1; // 1/(16MhZ / 1600) = 0.1ms
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <main+0x2ec>)
 8001288:	f240 623f 	movw	r2, #1599	; 0x63f
 800128c:	605a      	str	r2, [r3, #4]
	  		        HAL_TIM_PWM_Init(&timer);
 800128e:	481b      	ldr	r0, [pc, #108]	; (80012fc <main+0x2ec>)
 8001290:	f002 f97c 	bl	800358c <HAL_TIM_PWM_Init>

	  		        TIM_OC_InitTypeDef PWM_channel;
	  		        PWM_channel.OCMode = TIM_OCMODE_PWM1;
 8001294:	2360      	movs	r3, #96	; 0x60
 8001296:	61fb      	str	r3, [r7, #28]
	  		        PWM_channel.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24

	  		        PWM_channel.Pulse = 50 - 1;
 800129c:	2331      	movs	r3, #49	; 0x31
 800129e:	623b      	str	r3, [r7, #32]
	  		        HAL_TIM_PWM_ConfigChannel(&timer, &PWM_channel, TIM_CHANNEL_1);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4814      	ldr	r0, [pc, #80]	; (80012fc <main+0x2ec>)
 80012aa:	f002 fa91 	bl	80037d0 <HAL_TIM_PWM_ConfigChannel>
	  		        HAL_TIM_PWM_ConfigChannel(&timer, &PWM_channel, TIM_CHANNEL_3);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2208      	movs	r2, #8
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <main+0x2ec>)
 80012b8:	f002 fa8a 	bl	80037d0 <HAL_TIM_PWM_ConfigChannel>

	  		        PWM_channel.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
	  		        HAL_TIM_PWM_ConfigChannel(&timer, &PWM_channel, TIM_CHANNEL_2);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <main+0x2ec>)
 80012ca:	f002 fa81 	bl	80037d0 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	e019      	b.n	8001304 <main+0x2f4>
 80012d0:	40023800 	.word	0x40023800
 80012d4:	200000f8 	.word	0x200000f8
 80012d8:	20000098 	.word	0x20000098
 80012dc:	40026410 	.word	0x40026410
 80012e0:	200005e8 	.word	0x200005e8
 80012e4:	40013000 	.word	0x40013000
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	200001bc 	.word	0x200001bc
 80012f4:	20000128 	.word	0x20000128
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	2000012c 	.word	0x2000012c
 8001300:	40000800 	.word	0x40000800
	  		        HAL_TIM_PWM_ConfigChannel(&timer, &PWM_channel, TIM_CHANNEL_4);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	220c      	movs	r2, #12
 800130a:	4619      	mov	r1, r3
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <main+0x388>)
 800130e:	f002 fa5f 	bl	80037d0 <HAL_TIM_PWM_ConfigChannel>

	  		        HAL_TIM_PWM_Start(&timer, TIM_CHANNEL_1);
 8001312:	2100      	movs	r1, #0
 8001314:	4820      	ldr	r0, [pc, #128]	; (8001398 <main+0x388>)
 8001316:	f002 f993 	bl	8003640 <HAL_TIM_PWM_Start>
	  		        HAL_TIM_PWM_Start(&timer, TIM_CHANNEL_2);
 800131a:	2104      	movs	r1, #4
 800131c:	481e      	ldr	r0, [pc, #120]	; (8001398 <main+0x388>)
 800131e:	f002 f98f 	bl	8003640 <HAL_TIM_PWM_Start>
	  		        HAL_TIM_PWM_Start(&timer, TIM_CHANNEL_3);
 8001322:	2108      	movs	r1, #8
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <main+0x388>)
 8001326:	f002 f98b 	bl	8003640 <HAL_TIM_PWM_Start>
	  		        HAL_TIM_PWM_Start(&timer, TIM_CHANNEL_4);
 800132a:	210c      	movs	r1, #12
 800132c:	481a      	ldr	r0, [pc, #104]	; (8001398 <main+0x388>)
 800132e:	f002 f987 	bl	8003640 <HAL_TIM_PWM_Start>





	  		      __HAL_RCC_TIM3_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <main+0x38c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a18      	ldr	r2, [pc, #96]	; (800139c <main+0x38c>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <main+0x38c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]


	  		        timer2.Instance = TIM3;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <main+0x390>)
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <main+0x394>)
 8001352:	601a      	str	r2, [r3, #0]
	  		        timer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <main+0x390>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
	  		        timer2.Init.Period = 50 - 1; // 50 ms P = (ARR+1)*(1/(Clk_Freq/(Prescaler+1))
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <main+0x390>)
 800135c:	2231      	movs	r2, #49	; 0x31
 800135e:	60da      	str	r2, [r3, #12]
	  		        timer2.Init.Prescaler = 16000 - 1; // 1/(16MhZ / 16000) = 1 ms
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <main+0x390>)
 8001362:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001366:	605a      	str	r2, [r3, #4]
	  		        HAL_TIM_Base_Init(&timer2);
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <main+0x390>)
 800136a:	f002 f84d 	bl	8003408 <HAL_TIM_Base_Init>

	  		        __HAL_TIM_ENABLE_IT(&timer2,TIM_IT_UPDATE);
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <main+0x390>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <main+0x390>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	60da      	str	r2, [r3, #12]

	  		        HAL_TIM_Base_Start(&timer2);
 800137e:	4808      	ldr	r0, [pc, #32]	; (80013a0 <main+0x390>)
 8001380:	f002 f89c 	bl	80034bc <HAL_TIM_Base_Start>

	  		        HAL_NVIC_SetPriority(TIM3_IRQn, 1, 2);
 8001384:	2202      	movs	r2, #2
 8001386:	2101      	movs	r1, #1
 8001388:	201d      	movs	r0, #29
 800138a:	f000 fef8 	bl	800217e <HAL_NVIC_SetPriority>
	  		        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800138e:	201d      	movs	r0, #29
 8001390:	f000 ff11 	bl	80021b6 <HAL_NVIC_EnableIRQ>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001394:	e7fe      	b.n	8001394 <main+0x384>
 8001396:	bf00      	nop
 8001398:	2000012c 	.word	0x2000012c
 800139c:	40023800 	.word	0x40023800
 80013a0:	20000174 	.word	0x20000174
 80013a4:	40000400 	.word	0x40000400

080013a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fd6c 	bl	8003e94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	2310      	movs	r3, #16
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 64;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001424:	2307      	movs	r3, #7
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fbab 	bl	8002b88 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
		Error_Handler();
 8001438:	f000 f97e 	bl	8001738 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001444:	2390      	movs	r3, #144	; 0x90
 8001446:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800144e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001452:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fe0c 	bl	8003078 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
		Error_Handler();
 8001466:	f000 f967 	bl	8001738 <Error_Handler>
	}
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4ba2      	ldr	r3, [pc, #648]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4aa1      	ldr	r2, [pc, #644]	; (8001720 <MX_GPIO_Init+0x2a4>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b9f      	ldr	r3, [pc, #636]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b9b      	ldr	r3, [pc, #620]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a9a      	ldr	r2, [pc, #616]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b98      	ldr	r3, [pc, #608]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b94      	ldr	r3, [pc, #592]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a93      	ldr	r2, [pc, #588]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b91      	ldr	r3, [pc, #580]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b8d      	ldr	r3, [pc, #564]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a8c      	ldr	r2, [pc, #560]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <MX_GPIO_Init+0x2a4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b86      	ldr	r3, [pc, #536]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a85      	ldr	r2, [pc, #532]	; (8001720 <MX_GPIO_Init+0x2a4>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b83      	ldr	r3, [pc, #524]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a7e      	ldr	r2, [pc, #504]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b7c      	ldr	r3, [pc, #496]	; (8001720 <MX_GPIO_Init+0x2a4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	2108      	movs	r1, #8
 800153e:	4879      	ldr	r0, [pc, #484]	; (8001724 <MX_GPIO_Init+0x2a8>)
 8001540:	f001 fb08 	bl	8002b54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 8001544:	2201      	movs	r2, #1
 8001546:	2101      	movs	r1, #1
 8001548:	4877      	ldr	r0, [pc, #476]	; (8001728 <MX_GPIO_Init+0x2ac>)
 800154a:	f001 fb03 	bl	8002b54 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800154e:	2200      	movs	r2, #0
 8001550:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001554:	4875      	ldr	r0, [pc, #468]	; (800172c <MX_GPIO_Init+0x2b0>)
 8001556:	f001 fafd 	bl	8002b54 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800155a:	2308      	movs	r3, #8
 800155c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	486c      	ldr	r0, [pc, #432]	; (8001724 <MX_GPIO_Init+0x2a8>)
 8001572:	f001 f953 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001576:	2301      	movs	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4866      	ldr	r0, [pc, #408]	; (8001728 <MX_GPIO_Init+0x2ac>)
 800158e:	f001 f945 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001592:	2308      	movs	r3, #8
 8001594:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a2:	2305      	movs	r3, #5
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	485e      	ldr	r0, [pc, #376]	; (8001728 <MX_GPIO_Init+0x2ac>)
 80015ae:	f001 f935 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	485a      	ldr	r0, [pc, #360]	; (8001730 <MX_GPIO_Init+0x2b4>)
 80015c8:	f001 f928 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015cc:	2310      	movs	r3, #16
 80015ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015dc:	2306      	movs	r3, #6
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4852      	ldr	r0, [pc, #328]	; (8001730 <MX_GPIO_Init+0x2b4>)
 80015e8:	f001 f918 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80015ec:	23e0      	movs	r3, #224	; 0xe0
 80015ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015fc:	2305      	movs	r3, #5
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	484a      	ldr	r0, [pc, #296]	; (8001730 <MX_GPIO_Init+0x2b4>)
 8001608:	f001 f908 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800160c:	2304      	movs	r3, #4
 800160e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4845      	ldr	r0, [pc, #276]	; (8001734 <MX_GPIO_Init+0x2b8>)
 8001620:	f001 f8fc 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001628:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001636:	2305      	movs	r3, #5
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	483c      	ldr	r0, [pc, #240]	; (8001734 <MX_GPIO_Init+0x2b8>)
 8001642:	f001 f8eb 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001646:	f24f 0310 	movw	r3, #61456	; 0xf010
 800164a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4833      	ldr	r0, [pc, #204]	; (800172c <MX_GPIO_Init+0x2b0>)
 8001660:	f001 f8dc 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8001664:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001668:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001676:	2306      	movs	r3, #6
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x2ac>)
 8001682:	f001 f8cb 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001686:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4825      	ldr	r0, [pc, #148]	; (8001730 <MX_GPIO_Init+0x2b4>)
 800169c:	f001 f8be 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80016a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016b2:	230a      	movs	r3, #10
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	481c      	ldr	r0, [pc, #112]	; (8001730 <MX_GPIO_Init+0x2b4>)
 80016be:	f001 f8ad 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016c2:	2320      	movs	r3, #32
 80016c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4815      	ldr	r0, [pc, #84]	; (800172c <MX_GPIO_Init+0x2b0>)
 80016d6:	f001 f8a1 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80016da:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ec:	2304      	movs	r3, #4
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	480f      	ldr	r0, [pc, #60]	; (8001734 <MX_GPIO_Init+0x2b8>)
 80016f8:	f001 f890 	bl	800281c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001700:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001704:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_GPIO_Init+0x2a8>)
 8001712:	f001 f883 	bl	800281c <HAL_GPIO_Init>

}
 8001716:	bf00      	nop
 8001718:	3730      	adds	r7, #48	; 0x30
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40021000 	.word	0x40021000
 8001728:	40020800 	.word	0x40020800
 800172c:	40020c00 	.word	0x40020c00
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400

08001738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001782:	2007      	movs	r0, #7
 8001784:	f000 fcf0 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e07b      	b.n	800189e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017b6:	d009      	beq.n	80017cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
 80017be:	e005      	b.n	80017cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f85d 	bl	80018a6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183c:	431a      	orrs	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	f003 0104 	and.w	r1, r3, #4
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f003 0210 	and.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800188c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b08c      	sub	sp, #48	; 0x30
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_SPI_TransmitReceive+0x26>
 80018dc:	2302      	movs	r3, #2
 80018de:	e18a      	b.n	8001bf6 <HAL_SPI_TransmitReceive+0x33c>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018e8:	f000 fb3e 	bl	8001f68 <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80018fe:	887b      	ldrh	r3, [r7, #2]
 8001900:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001906:	2b01      	cmp	r3, #1
 8001908:	d00f      	beq.n	800192a <HAL_SPI_TransmitReceive+0x70>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001910:	d107      	bne.n	8001922 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_SPI_TransmitReceive+0x68>
 800191a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001928:	e15b      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_SPI_TransmitReceive+0x82>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_SPI_TransmitReceive+0x82>
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d103      	bne.n	8001944 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001942:	e14e      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b04      	cmp	r3, #4
 800194e:	d003      	beq.n	8001958 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	887a      	ldrh	r2, [r7, #2]
 800197a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d007      	beq.n	80019ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b4:	d178      	bne.n	8001aa8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_SPI_TransmitReceive+0x10a>
 80019be:	8b7b      	ldrh	r3, [r7, #26]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d166      	bne.n	8001a92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	881a      	ldrh	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	1c9a      	adds	r2, r3, #2
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019e8:	e053      	b.n	8001a92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d11b      	bne.n	8001a30 <HAL_SPI_TransmitReceive+0x176>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_SPI_TransmitReceive+0x176>
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d113      	bne.n	8001a30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	1c9a      	adds	r2, r3, #2
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d119      	bne.n	8001a72 <HAL_SPI_TransmitReceive+0x1b8>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d014      	beq.n	8001a72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a52:	b292      	uxth	r2, r2
 8001a54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	1c9a      	adds	r2, r3, #2
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a72:	f000 fa79 	bl	8001f68 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d807      	bhi.n	8001a92 <HAL_SPI_TransmitReceive+0x1d8>
 8001a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a88:	d003      	beq.n	8001a92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001a90:	e0a7      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1a6      	bne.n	80019ea <HAL_SPI_TransmitReceive+0x130>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1a1      	bne.n	80019ea <HAL_SPI_TransmitReceive+0x130>
 8001aa6:	e07c      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_SPI_TransmitReceive+0x1fc>
 8001ab0:	8b7b      	ldrh	r3, [r7, #26]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d16b      	bne.n	8001b8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	330c      	adds	r3, #12
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001adc:	e057      	b.n	8001b8e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d11c      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x26c>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d017      	beq.n	8001b26 <HAL_SPI_TransmitReceive+0x26c>
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d114      	bne.n	8001b26 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	330c      	adds	r3, #12
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d119      	bne.n	8001b68 <HAL_SPI_TransmitReceive+0x2ae>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d014      	beq.n	8001b68 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b68:	f000 f9fe 	bl	8001f68 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d803      	bhi.n	8001b80 <HAL_SPI_TransmitReceive+0x2c6>
 8001b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b7e:	d102      	bne.n	8001b86 <HAL_SPI_TransmitReceive+0x2cc>
 8001b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d103      	bne.n	8001b8e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b8c:	e029      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1a2      	bne.n	8001ade <HAL_SPI_TransmitReceive+0x224>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d19d      	bne.n	8001ade <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f8b2 	bl	8001d10 <SPI_EndRxTxTransaction>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001bbe:	e010      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10b      	bne.n	8001be0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	e000      	b.n	8001be2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001be0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3730      	adds	r7, #48	; 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c10:	f000 f9aa 	bl	8001f68 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c20:	f000 f9a2 	bl	8001f68 <HAL_GetTick>
 8001c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c26:	4b39      	ldr	r3, [pc, #228]	; (8001d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	0d1b      	lsrs	r3, r3, #20
 8001c2e:	69fa      	ldr	r2, [r7, #28]
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c36:	e054      	b.n	8001ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3e:	d050      	beq.n	8001ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c40:	f000 f992 	bl	8001f68 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d902      	bls.n	8001c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d13d      	bne.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c6e:	d111      	bne.n	8001c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c78:	d004      	beq.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d107      	bne.n	8001c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c9c:	d10f      	bne.n	8001cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e017      	b.n	8001d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4013      	ands	r3, r2
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d19b      	bne.n	8001c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000

08001d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <SPI_EndRxTxTransaction+0x7c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <SPI_EndRxTxTransaction+0x80>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0d5b      	lsrs	r3, r3, #21
 8001d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3a:	d112      	bne.n	8001d62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff ff5a 	bl	8001c00 <SPI_WaitFlagStateUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e00f      	b.n	8001d82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b80      	cmp	r3, #128	; 0x80
 8001d7a:	d0f2      	beq.n	8001d62 <SPI_EndRxTxTransaction+0x52>
 8001d7c:	e000      	b.n	8001d80 <SPI_EndRxTxTransaction+0x70>
        break;
 8001d7e:	bf00      	nop
  }

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	165e9f81 	.word	0x165e9f81

08001d94 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001de0:	f000 f8ae 	bl	8001f40 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	/* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <TIM3_IRQHandler>:





void TIM3_IRQHandler(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	if(__HAL_TIM_GET_FLAG(&timer2,TIM_IT_UPDATE)){
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <TIM3_IRQHandler+0x30>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10c      	bne.n	8001e14 <TIM3_IRQHandler+0x2c>



		func(cnt1,cnt2);
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <TIM3_IRQHandler+0x34>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <TIM3_IRQHandler+0x38>)
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ffc7 	bl	8000d98 <func>

		//to se klice vsakih 50ms



		__HAL_TIM_CLEAR_FLAG(&timer2,TIM_IT_UPDATE);
 8001e0a:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <TIM3_IRQHandler+0x30>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f06f 0201 	mvn.w	r2, #1
 8001e12:	611a      	str	r2, [r3, #16]





}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000174 	.word	0x20000174
 8001e1c:	20000090 	.word	0x20000090
 8001e20:	20000094 	.word	0x20000094

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e72:	f7ff ffd7 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f001 ffe9 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7ff f8c9 	bl	8001010 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e8c:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 8001e90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e94:	20000644 	.word	0x20000644

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f94f 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fc38 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f967 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f000 f92f 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000640 	.word	0x20000640

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000640 	.word	0x20000640

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000008 	.word	0x20000008

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff3e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff31 	bl	800202c <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff feb6 	bl	8001f68 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e099      	b.n	800233c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002228:	e00f      	b.n	800224a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222a:	f7ff fe9d 	bl	8001f68 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b05      	cmp	r3, #5
 8002236:	d908      	bls.n	800224a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e078      	b.n	800233c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e8      	bne.n	800222a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_DMA_Init+0x158>)
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4313      	orrs	r3, r2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d117      	bne.n	800230e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fa17 	bl	8002724 <DMA_CheckFifoParam>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800230a:	2301      	movs	r3, #1
 800230c:	e016      	b.n	800233c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9ce 	bl	80026b8 <DMA_CalcBaseAndBitshift>
 800231c:	4603      	mov	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	223f      	movs	r2, #63	; 0x3f
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f010803f 	.word	0xf010803f

08002348 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Start+0x20>
 8002364:	2302      	movs	r3, #2
 8002366:	e026      	b.n	80023b6 <HAL_DMA_Start+0x6e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d115      	bne.n	80023a8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f963 	bl	800265c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e005      	b.n	80023b4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fdcc 	bl	8001f68 <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d008      	beq.n	80023f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e052      	b.n	8002496 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0216 	bic.w	r2, r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800240e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <HAL_DMA_Abort+0x62>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0208 	bic.w	r2, r2, #8
 800242e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	e013      	b.n	800246a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002442:	f7ff fd91 	bl	8001f68 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b05      	cmp	r3, #5
 800244e:	d90c      	bls.n	800246a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2220      	movs	r2, #32
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2203      	movs	r2, #3
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e015      	b.n	8002496 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e4      	bne.n	8002442 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	460b      	mov	r3, r1
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80024b0:	f7ff fd5a 	bl	8001f68 <HAL_GetTick>
 80024b4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d008      	beq.n	80024d4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0bf      	b.n	8002654 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0b2      	b.n	8002654 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d106      	bne.n	8002502 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2220      	movs	r2, #32
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e005      	b.n	800250e <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2210      	movs	r2, #16
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800251a:	e05a      	b.n	80025d2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002522:	d017      	beq.n	8002554 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_DMA_PollForTransfer+0x9c>
 800252a:	f7ff fd1d 	bl	8001f68 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d20c      	bcs.n	8002554 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e07f      	b.n	8002654 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	2208      	movs	r2, #8
 8002560:	409a      	lsls	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2208      	movs	r2, #8
 800257c:	409a      	lsls	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2201      	movs	r2, #1
 8002588:	409a      	lsls	r2, r3
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2204      	movs	r2, #4
 80025b0:	409a      	lsls	r2, r3
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2204      	movs	r2, #4
 80025cc:	409a      	lsls	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80025d2:	6a3a      	ldr	r2, [r7, #32]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_DMA_PollForTransfer+0x14a>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d099      	beq.n	800251c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d012      	beq.n	8002622 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff fede 	bl	80023be <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2230      	movs	r2, #48	; 0x30
 8002608:	409a      	lsls	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e018      	b.n	8002654 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2230      	movs	r2, #48	; 0x30
 800262e:	409a      	lsls	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002644:	e005      	b.n	8002652 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2210      	movs	r2, #16
 800264c:	409a      	lsls	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8002652:	7ffb      	ldrb	r3, [r7, #31]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b10      	subs	r3, #16
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <DMA_CalcBaseAndBitshift+0x64>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <DMA_CalcBaseAndBitshift+0x68>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d909      	bls.n	80026fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	; 0x58
 80026f8:	e007      	b.n	800270a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08004ea0 	.word	0x08004ea0

08002724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <DMA_CheckFifoParam+0x5a>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d856      	bhi.n	80027f2 <DMA_CheckFifoParam+0xce>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <DMA_CheckFifoParam+0x28>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	0800276f 	.word	0x0800276f
 8002754:	0800275d 	.word	0x0800275d
 8002758:	080027f3 	.word	0x080027f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e043      	b.n	80027f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002776:	d140      	bne.n	80027fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e03d      	b.n	80027fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d121      	bne.n	80027cc <DMA_CheckFifoParam+0xa8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d837      	bhi.n	80027fe <DMA_CheckFifoParam+0xda>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x70>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027ab 	.word	0x080027ab
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	080027bd 	.word	0x080027bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e030      	b.n	800280c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e022      	b.n	8002802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ca:	e01c      	b.n	8002806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d903      	bls.n	80027da <DMA_CheckFifoParam+0xb6>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d003      	beq.n	80027e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d8:	e018      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      break;
 80027de:	e015      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e00b      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f2:	bf00      	nop
 80027f4:	e00a      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e008      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e006      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e004      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;   
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
    }
  } 
  
  return status; 
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b5d      	ldr	r3, [pc, #372]	; (8002b28 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_GPIO_Init+0x310>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_GPIO_Init+0x328>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	; (8002b4c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_GPIO_Init+0x310>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e264      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba6:	4ba3      	ldr	r3, [pc, #652]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d00c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb2:	4ba0      	ldr	r3, [pc, #640]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d112      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	4b9d      	ldr	r3, [pc, #628]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	4b99      	ldr	r3, [pc, #612]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d05b      	beq.n	8002c90 <HAL_RCC_OscConfig+0x108>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d157      	bne.n	8002c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e23f      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x74>
 8002bee:	4b91      	ldr	r3, [pc, #580]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a90      	ldr	r2, [pc, #576]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x98>
 8002c06:	4b8b      	ldr	r3, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a8a      	ldr	r2, [pc, #552]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a87      	ldr	r2, [pc, #540]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xb0>
 8002c20:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a83      	ldr	r2, [pc, #524]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b81      	ldr	r3, [pc, #516]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a80      	ldr	r2, [pc, #512]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7ff f992 	bl	8001f68 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff f98e 	bl	8001f68 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e204      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xc0>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f97e 	bl	8001f68 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff f97a 	bl	8001f68 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e1f0      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0xe8>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1c4      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4952      	ldr	r1, [pc, #328]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <HAL_RCC_OscConfig+0x2b0>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff f933 	bl	8001f68 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7ff f92f 	bl	8001f68 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1a5      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b46      	ldr	r3, [pc, #280]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4940      	ldr	r1, [pc, #256]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0x2b0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f912 	bl	8001f68 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7ff f90e 	bl	8001f68 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e184      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d030      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_RCC_OscConfig+0x2b4>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7ff f8f2 	bl	8001f68 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d88:	f7ff f8ee 	bl	8001f68 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e164      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x200>
 8002da6:	e015      	b.n	8002dd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da8:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <HAL_RCC_OscConfig+0x2b4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dae:	f7ff f8db 	bl	8001f68 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7ff f8d7 	bl	8001f68 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e14d      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80a0 	beq.w	8002f22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCC_OscConfig+0x2b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d121      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_RCC_OscConfig+0x2b8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7ff f89d 	bl	8001f68 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e011      	b.n	8002e56 <HAL_RCC_OscConfig+0x2ce>
 8002e32:	bf00      	nop
 8002e34:	40023800 	.word	0x40023800
 8002e38:	42470000 	.word	0x42470000
 8002e3c:	42470e80 	.word	0x42470e80
 8002e40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7ff f890 	bl	8001f68 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e106      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_RCC_OscConfig+0x4e4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2f0>
 8002e6a:	4b81      	ldr	r3, [pc, #516]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a80      	ldr	r2, [pc, #512]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	e01c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x32a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x312>
 8002e80:	4b7b      	ldr	r3, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a7a      	ldr	r2, [pc, #488]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b78      	ldr	r3, [pc, #480]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a77      	ldr	r2, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e00b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x32a>
 8002e9a:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a74      	ldr	r2, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b72      	ldr	r3, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a71      	ldr	r2, [pc, #452]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d015      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7ff f855 	bl	8001f68 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7ff f851 	bl	8001f68 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0c5      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ee      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x33a>
 8002ee4:	e014      	b.n	8002f10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7ff f83f 	bl	8001f68 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7ff f83b 	bl	8001f68 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0af      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ee      	bne.n	8002eee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a55      	ldr	r2, [pc, #340]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 809b 	beq.w	8003062 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d05c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d141      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7ff f80f 	bl	8001f68 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7ff f80b 	bl	8001f68 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e081      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f60:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f0      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	085b      	lsrs	r3, r3, #1
 8002f84:	3b01      	subs	r3, #1
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	4937      	ldr	r1, [pc, #220]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe ffe4 	bl	8001f68 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fe ffe0 	bl	8001f68 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e056      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x41c>
 8002fc2:	e04e      	b.n	8003062 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_OscConfig+0x4ec>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe ffcd 	bl	8001f68 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe ffc9 	bl	8001f68 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e03f      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x44a>
 8002ff0:	e037      	b.n	8003062 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e032      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d028      	beq.n	800305e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d121      	bne.n	800305e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d11a      	bne.n	800305e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003034:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003036:	4293      	cmp	r3, r2
 8003038:	d111      	bne.n	800305e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	3b01      	subs	r3, #1
 8003048:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304a:	429a      	cmp	r2, r3
 800304c:	d107      	bne.n	800305e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40007000 	.word	0x40007000
 8003070:	40023800 	.word	0x40023800
 8003074:	42470060 	.word	0x42470060

08003078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0cc      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d90c      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d044      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d119      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d003      	beq.n	8003136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b3f      	ldr	r3, [pc, #252]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3b      	ldr	r3, [pc, #236]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e067      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b37      	ldr	r3, [pc, #220]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4934      	ldr	r1, [pc, #208]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe fefe 	bl	8001f68 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe fefa 	bl	8001f68 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e04f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2b      	ldr	r3, [pc, #172]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d20c      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490a      	ldr	r1, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fe5e 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	08004e90 	.word	0x08004e90
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	2300      	movs	r3, #0
 8003256:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d00d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x40>
 8003268:	2b08      	cmp	r3, #8
 800326a:	f200 80bd 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 8003272:	2b04      	cmp	r3, #4
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3a>
 8003276:	e0b7      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327a:	60bb      	str	r3, [r7, #8]
       break;
 800327c:	e0b7      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003280:	60bb      	str	r3, [r7, #8]
      break;
 8003282:	e0b4      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04d      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	461a      	mov	r2, r3
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	ea02 0800 	and.w	r8, r2, r0
 80032b2:	ea03 0901 	and.w	r9, r3, r1
 80032b6:	4640      	mov	r0, r8
 80032b8:	4649      	mov	r1, r9
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	014b      	lsls	r3, r1, #5
 80032c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c8:	0142      	lsls	r2, r0, #5
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	ebb0 0008 	subs.w	r0, r0, r8
 80032d2:	eb61 0109 	sbc.w	r1, r1, r9
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032e4:	0182      	lsls	r2, r0, #6
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	eb63 0301 	sbc.w	r3, r3, r1
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	00d9      	lsls	r1, r3, #3
 80032f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032fa:	00d0      	lsls	r0, r2, #3
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	eb12 0208 	adds.w	r2, r2, r8
 8003304:	eb43 0309 	adc.w	r3, r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0259      	lsls	r1, r3, #9
 8003312:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003316:	0250      	lsls	r0, r2, #9
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f7fd fbba 	bl	8000aa0 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e04a      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	ea02 0400 	and.w	r4, r2, r0
 800334e:	ea03 0501 	and.w	r5, r3, r1
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003364:	0142      	lsls	r2, r0, #5
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	1b00      	subs	r0, r0, r4
 800336c:	eb61 0105 	sbc.w	r1, r1, r5
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	018b      	lsls	r3, r1, #6
 800337a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800337e:	0182      	lsls	r2, r0, #6
 8003380:	1a12      	subs	r2, r2, r0
 8003382:	eb63 0301 	sbc.w	r3, r3, r1
 8003386:	f04f 0000 	mov.w	r0, #0
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	00d9      	lsls	r1, r3, #3
 8003390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003394:	00d0      	lsls	r0, r2, #3
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	1912      	adds	r2, r2, r4
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	0299      	lsls	r1, r3, #10
 80033aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ae:	0290      	lsls	r0, r2, #10
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	f7fd fb6e 	bl	8000aa0 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ea:	60bb      	str	r3, [r7, #8]
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	68bb      	ldr	r3, [r7, #8]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f839 	bl	80034a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 fa84 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e046      	b.n	8003562 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a23      	ldr	r2, [pc, #140]	; (8003570 <HAL_TIM_Base_Start+0xb4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d022      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d01d      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1f      	ldr	r2, [pc, #124]	; (8003574 <HAL_TIM_Base_Start+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d018      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_TIM_Base_Start+0xbc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1c      	ldr	r2, [pc, #112]	; (800357c <HAL_TIM_Base_Start+0xc0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_TIM_Base_Start+0xc4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <HAL_TIM_Base_Start+0xc8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_TIM_Base_Start+0xcc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d010      	beq.n	8003560 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e007      	b.n	8003560 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40010400 	.word	0x40010400
 8003584:	40014000 	.word	0x40014000
 8003588:	40001800 	.word	0x40001800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f839 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 f9c2 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_TIM_PWM_Start+0x24>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e022      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HAL_TIM_PWM_Start+0x3e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e015      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d109      	bne.n	8003698 <HAL_TIM_PWM_Start+0x58>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e008      	b.n	80036aa <HAL_TIM_PWM_Start+0x6a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07c      	b.n	80037ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Start+0x82>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c0:	e013      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x92>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e0:	e003      	b.n	80036ea <HAL_TIM_PWM_Start+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fb7e 	bl	8003df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_TIM_PWM_Start+0x174>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_PWM_Start+0xcc>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <HAL_TIM_PWM_Start+0x178>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_TIM_PWM_Start+0xd0>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_TIM_PWM_Start+0xd2>
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <HAL_TIM_PWM_Start+0x174>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d022      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d01d      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1f      	ldr	r2, [pc, #124]	; (80037bc <HAL_TIM_PWM_Start+0x17c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d018      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <HAL_TIM_PWM_Start+0x180>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <HAL_TIM_PWM_Start+0x184>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <HAL_TIM_PWM_Start+0x178>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIM_PWM_Start+0x188>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIM_PWM_Start+0x136>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a16      	ldr	r2, [pc, #88]	; (80037cc <HAL_TIM_PWM_Start+0x18c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d111      	bne.n	800379a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b06      	cmp	r3, #6
 8003786:	d010      	beq.n	80037aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	e007      	b.n	80037aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40001800 	.word	0x40001800

080037d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ae      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	f200 809f 	bhi.w	800393c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003839 	.word	0x08003839
 8003808:	0800393d 	.word	0x0800393d
 800380c:	0800393d 	.word	0x0800393d
 8003810:	0800393d 	.word	0x0800393d
 8003814:	08003879 	.word	0x08003879
 8003818:	0800393d 	.word	0x0800393d
 800381c:	0800393d 	.word	0x0800393d
 8003820:	0800393d 	.word	0x0800393d
 8003824:	080038bb 	.word	0x080038bb
 8003828:	0800393d 	.word	0x0800393d
 800382c:	0800393d 	.word	0x0800393d
 8003830:	0800393d 	.word	0x0800393d
 8003834:	080038fb 	.word	0x080038fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f928 	bl	8003a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0208 	orr.w	r2, r2, #8
 8003852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6999      	ldr	r1, [r3, #24]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	619a      	str	r2, [r3, #24]
      break;
 8003876:	e064      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f978 	bl	8003b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	021a      	lsls	r2, r3, #8
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	619a      	str	r2, [r3, #24]
      break;
 80038b8:	e043      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f9cd 	bl	8003c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0208 	orr.w	r2, r2, #8
 80038d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0204 	bic.w	r2, r2, #4
 80038e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69d9      	ldr	r1, [r3, #28]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	61da      	str	r2, [r3, #28]
      break;
 80038f8:	e023      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa21 	bl	8003d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	021a      	lsls	r2, r3, #8
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	61da      	str	r2, [r3, #28]
      break;
 800393a:	e002      	b.n	8003942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
      break;
 8003940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a40      	ldr	r2, [pc, #256]	; (8003a68 <TIM_Base_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3d      	ldr	r2, [pc, #244]	; (8003a6c <TIM_Base_SetConfig+0x118>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <TIM_Base_SetConfig+0x11c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <TIM_Base_SetConfig+0x120>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3a      	ldr	r2, [pc, #232]	; (8003a78 <TIM_Base_SetConfig+0x124>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <TIM_Base_SetConfig+0x114>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d027      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <TIM_Base_SetConfig+0x118>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d023      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <TIM_Base_SetConfig+0x11c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <TIM_Base_SetConfig+0x120>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a29      	ldr	r2, [pc, #164]	; (8003a78 <TIM_Base_SetConfig+0x124>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d017      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <TIM_Base_SetConfig+0x128>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <TIM_Base_SetConfig+0x130>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a25      	ldr	r2, [pc, #148]	; (8003a88 <TIM_Base_SetConfig+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <TIM_Base_SetConfig+0x138>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <TIM_Base_SetConfig+0x13c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <TIM_Base_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0xf8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <TIM_Base_SetConfig+0x124>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	40010400 	.word	0x40010400
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40014400 	.word	0x40014400
 8003a84:	40014800 	.word	0x40014800
 8003a88:	40001800 	.word	0x40001800
 8003a8c:	40001c00 	.word	0x40001c00
 8003a90:	40002000 	.word	0x40002000

08003a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0201 	bic.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <TIM_OC1_SetConfig+0xd8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC1_SetConfig+0x64>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <TIM_OC1_SetConfig+0xdc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d10c      	bne.n	8003b12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f023 0308 	bic.w	r3, r3, #8
 8003afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <TIM_OC1_SetConfig+0xd8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_OC1_SetConfig+0x8e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <TIM_OC1_SetConfig+0xdc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d111      	bne.n	8003b46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40010400 	.word	0x40010400

08003b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f023 0210 	bic.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0320 	bic.w	r3, r3, #32
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <TIM_OC2_SetConfig+0xe4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_OC2_SetConfig+0x68>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_OC2_SetConfig+0xe8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10d      	bne.n	8003bf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <TIM_OC2_SetConfig+0xe4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC2_SetConfig+0x94>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a16      	ldr	r2, [pc, #88]	; (8003c5c <TIM_OC2_SetConfig+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d113      	bne.n	8003c30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010400 	.word	0x40010400

08003c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <TIM_OC3_SetConfig+0xe0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x66>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <TIM_OC3_SetConfig+0xe4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <TIM_OC3_SetConfig+0xe0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_OC3_SetConfig+0x92>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <TIM_OC3_SetConfig+0xe4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d113      	bne.n	8003d1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40010400 	.word	0x40010400

08003d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <TIM_OC4_SetConfig+0xa4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC4_SetConfig+0x68>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <TIM_OC4_SetConfig+0xa8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	bf00      	nop
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40010400 	.word	0x40010400

08003df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2201      	movs	r2, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <__errno>:
 8003e40:	4b01      	ldr	r3, [pc, #4]	; (8003e48 <__errno+0x8>)
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4d0d      	ldr	r5, [pc, #52]	; (8003e84 <__libc_init_array+0x38>)
 8003e50:	4c0d      	ldr	r4, [pc, #52]	; (8003e88 <__libc_init_array+0x3c>)
 8003e52:	1b64      	subs	r4, r4, r5
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	2600      	movs	r6, #0
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	4d0b      	ldr	r5, [pc, #44]	; (8003e8c <__libc_init_array+0x40>)
 8003e5e:	4c0c      	ldr	r4, [pc, #48]	; (8003e90 <__libc_init_array+0x44>)
 8003e60:	f001 f808 	bl	8004e74 <_init>
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	2600      	movs	r6, #0
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	08004ef8 	.word	0x08004ef8
 8003e88:	08004ef8 	.word	0x08004ef8
 8003e8c:	08004ef8 	.word	0x08004ef8
 8003e90:	08004efc 	.word	0x08004efc

08003e94 <memset>:
 8003e94:	4402      	add	r2, r0
 8003e96:	4603      	mov	r3, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <pow>:
 8003ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea8:	ec59 8b10 	vmov	r8, r9, d0
 8003eac:	ec57 6b11 	vmov	r6, r7, d1
 8003eb0:	f000 f8da 	bl	8004068 <__ieee754_pow>
 8003eb4:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <pow+0x14c>)
 8003eb6:	f993 3000 	ldrsb.w	r3, [r3]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	ec55 4b10 	vmov	r4, r5, d0
 8003ec0:	d015      	beq.n	8003eee <pow+0x4a>
 8003ec2:	4632      	mov	r2, r6
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4630      	mov	r0, r6
 8003ec8:	4639      	mov	r1, r7
 8003eca:	f7fc fdd3 	bl	8000a74 <__aeabi_dcmpun>
 8003ece:	b970      	cbnz	r0, 8003eee <pow+0x4a>
 8003ed0:	4642      	mov	r2, r8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	f7fc fdcc 	bl	8000a74 <__aeabi_dcmpun>
 8003edc:	2200      	movs	r2, #0
 8003ede:	2300      	movs	r3, #0
 8003ee0:	b148      	cbz	r0, 8003ef6 <pow+0x52>
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	4639      	mov	r1, r7
 8003ee6:	f7fc fd93 	bl	8000a10 <__aeabi_dcmpeq>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d17d      	bne.n	8003fea <pow+0x146>
 8003eee:	ec45 4b10 	vmov	d0, r4, r5
 8003ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc fd89 	bl	8000a10 <__aeabi_dcmpeq>
 8003efe:	b1e0      	cbz	r0, 8003f3a <pow+0x96>
 8003f00:	2200      	movs	r2, #0
 8003f02:	2300      	movs	r3, #0
 8003f04:	4630      	mov	r0, r6
 8003f06:	4639      	mov	r1, r7
 8003f08:	f7fc fd82 	bl	8000a10 <__aeabi_dcmpeq>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d16c      	bne.n	8003fea <pow+0x146>
 8003f10:	ec47 6b10 	vmov	d0, r6, r7
 8003f14:	f000 fe87 	bl	8004c26 <finite>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	d0e8      	beq.n	8003eee <pow+0x4a>
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4630      	mov	r0, r6
 8003f22:	4639      	mov	r1, r7
 8003f24:	f7fc fd7e 	bl	8000a24 <__aeabi_dcmplt>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d0e0      	beq.n	8003eee <pow+0x4a>
 8003f2c:	f7ff ff88 	bl	8003e40 <__errno>
 8003f30:	2321      	movs	r3, #33	; 0x21
 8003f32:	6003      	str	r3, [r0, #0]
 8003f34:	2400      	movs	r4, #0
 8003f36:	4d2f      	ldr	r5, [pc, #188]	; (8003ff4 <pow+0x150>)
 8003f38:	e7d9      	b.n	8003eee <pow+0x4a>
 8003f3a:	ec45 4b10 	vmov	d0, r4, r5
 8003f3e:	f000 fe72 	bl	8004c26 <finite>
 8003f42:	bbb8      	cbnz	r0, 8003fb4 <pow+0x110>
 8003f44:	ec49 8b10 	vmov	d0, r8, r9
 8003f48:	f000 fe6d 	bl	8004c26 <finite>
 8003f4c:	b390      	cbz	r0, 8003fb4 <pow+0x110>
 8003f4e:	ec47 6b10 	vmov	d0, r6, r7
 8003f52:	f000 fe68 	bl	8004c26 <finite>
 8003f56:	b368      	cbz	r0, 8003fb4 <pow+0x110>
 8003f58:	4622      	mov	r2, r4
 8003f5a:	462b      	mov	r3, r5
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	f7fc fd88 	bl	8000a74 <__aeabi_dcmpun>
 8003f64:	b160      	cbz	r0, 8003f80 <pow+0xdc>
 8003f66:	f7ff ff6b 	bl	8003e40 <__errno>
 8003f6a:	2321      	movs	r3, #33	; 0x21
 8003f6c:	6003      	str	r3, [r0, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2300      	movs	r3, #0
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fc fc0d 	bl	8000794 <__aeabi_ddiv>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	e7b6      	b.n	8003eee <pow+0x4a>
 8003f80:	f7ff ff5e 	bl	8003e40 <__errno>
 8003f84:	2322      	movs	r3, #34	; 0x22
 8003f86:	6003      	str	r3, [r0, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc fd48 	bl	8000a24 <__aeabi_dcmplt>
 8003f94:	2400      	movs	r4, #0
 8003f96:	b158      	cbz	r0, 8003fb0 <pow+0x10c>
 8003f98:	ec47 6b10 	vmov	d0, r6, r7
 8003f9c:	f000 fe58 	bl	8004c50 <rint>
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	ec51 0b10 	vmov	r0, r1, d0
 8003fa6:	463b      	mov	r3, r7
 8003fa8:	f7fc fd32 	bl	8000a10 <__aeabi_dcmpeq>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d0c2      	beq.n	8003f36 <pow+0x92>
 8003fb0:	4d11      	ldr	r5, [pc, #68]	; (8003ff8 <pow+0x154>)
 8003fb2:	e79c      	b.n	8003eee <pow+0x4a>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fd28 	bl	8000a10 <__aeabi_dcmpeq>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d094      	beq.n	8003eee <pow+0x4a>
 8003fc4:	ec49 8b10 	vmov	d0, r8, r9
 8003fc8:	f000 fe2d 	bl	8004c26 <finite>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d08e      	beq.n	8003eee <pow+0x4a>
 8003fd0:	ec47 6b10 	vmov	d0, r6, r7
 8003fd4:	f000 fe27 	bl	8004c26 <finite>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d088      	beq.n	8003eee <pow+0x4a>
 8003fdc:	f7ff ff30 	bl	8003e40 <__errno>
 8003fe0:	2322      	movs	r3, #34	; 0x22
 8003fe2:	6003      	str	r3, [r0, #0]
 8003fe4:	2400      	movs	r4, #0
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	e781      	b.n	8003eee <pow+0x4a>
 8003fea:	4d04      	ldr	r5, [pc, #16]	; (8003ffc <pow+0x158>)
 8003fec:	2400      	movs	r4, #0
 8003fee:	e77e      	b.n	8003eee <pow+0x4a>
 8003ff0:	20000070 	.word	0x20000070
 8003ff4:	fff00000 	.word	0xfff00000
 8003ff8:	7ff00000 	.word	0x7ff00000
 8003ffc:	3ff00000 	.word	0x3ff00000

08004000 <sqrt>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	ed2d 8b02 	vpush	{d8}
 8004006:	ec55 4b10 	vmov	r4, r5, d0
 800400a:	f000 fd4f 	bl	8004aac <__ieee754_sqrt>
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <sqrt+0x64>)
 8004010:	eeb0 8a40 	vmov.f32	s16, s0
 8004014:	eef0 8a60 	vmov.f32	s17, s1
 8004018:	f993 3000 	ldrsb.w	r3, [r3]
 800401c:	3301      	adds	r3, #1
 800401e:	d019      	beq.n	8004054 <sqrt+0x54>
 8004020:	4622      	mov	r2, r4
 8004022:	462b      	mov	r3, r5
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc fd24 	bl	8000a74 <__aeabi_dcmpun>
 800402c:	b990      	cbnz	r0, 8004054 <sqrt+0x54>
 800402e:	2200      	movs	r2, #0
 8004030:	2300      	movs	r3, #0
 8004032:	4620      	mov	r0, r4
 8004034:	4629      	mov	r1, r5
 8004036:	f7fc fcf5 	bl	8000a24 <__aeabi_dcmplt>
 800403a:	b158      	cbz	r0, 8004054 <sqrt+0x54>
 800403c:	f7ff ff00 	bl	8003e40 <__errno>
 8004040:	2321      	movs	r3, #33	; 0x21
 8004042:	6003      	str	r3, [r0, #0]
 8004044:	2200      	movs	r2, #0
 8004046:	2300      	movs	r3, #0
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	f7fc fba2 	bl	8000794 <__aeabi_ddiv>
 8004050:	ec41 0b18 	vmov	d8, r0, r1
 8004054:	eeb0 0a48 	vmov.f32	s0, s16
 8004058:	eef0 0a68 	vmov.f32	s1, s17
 800405c:	ecbd 8b02 	vpop	{d8}
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	bf00      	nop
 8004064:	20000070 	.word	0x20000070

08004068 <__ieee754_pow>:
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	ed2d 8b06 	vpush	{d8-d10}
 8004070:	b08d      	sub	sp, #52	; 0x34
 8004072:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004076:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800407a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800407e:	ea56 0100 	orrs.w	r1, r6, r0
 8004082:	ec53 2b10 	vmov	r2, r3, d0
 8004086:	f000 84d1 	beq.w	8004a2c <__ieee754_pow+0x9c4>
 800408a:	497f      	ldr	r1, [pc, #508]	; (8004288 <__ieee754_pow+0x220>)
 800408c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004090:	428c      	cmp	r4, r1
 8004092:	ee10 8a10 	vmov	r8, s0
 8004096:	4699      	mov	r9, r3
 8004098:	dc09      	bgt.n	80040ae <__ieee754_pow+0x46>
 800409a:	d103      	bne.n	80040a4 <__ieee754_pow+0x3c>
 800409c:	b97a      	cbnz	r2, 80040be <__ieee754_pow+0x56>
 800409e:	42a6      	cmp	r6, r4
 80040a0:	dd02      	ble.n	80040a8 <__ieee754_pow+0x40>
 80040a2:	e00c      	b.n	80040be <__ieee754_pow+0x56>
 80040a4:	428e      	cmp	r6, r1
 80040a6:	dc02      	bgt.n	80040ae <__ieee754_pow+0x46>
 80040a8:	428e      	cmp	r6, r1
 80040aa:	d110      	bne.n	80040ce <__ieee754_pow+0x66>
 80040ac:	b178      	cbz	r0, 80040ce <__ieee754_pow+0x66>
 80040ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80040b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80040b6:	ea54 0308 	orrs.w	r3, r4, r8
 80040ba:	f000 84b7 	beq.w	8004a2c <__ieee754_pow+0x9c4>
 80040be:	4873      	ldr	r0, [pc, #460]	; (800428c <__ieee754_pow+0x224>)
 80040c0:	b00d      	add	sp, #52	; 0x34
 80040c2:	ecbd 8b06 	vpop	{d8-d10}
 80040c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f000 bdb9 	b.w	8004c40 <nan>
 80040ce:	f1b9 0f00 	cmp.w	r9, #0
 80040d2:	da36      	bge.n	8004142 <__ieee754_pow+0xda>
 80040d4:	496e      	ldr	r1, [pc, #440]	; (8004290 <__ieee754_pow+0x228>)
 80040d6:	428e      	cmp	r6, r1
 80040d8:	dc51      	bgt.n	800417e <__ieee754_pow+0x116>
 80040da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80040de:	428e      	cmp	r6, r1
 80040e0:	f340 84af 	ble.w	8004a42 <__ieee754_pow+0x9da>
 80040e4:	1531      	asrs	r1, r6, #20
 80040e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80040ea:	2914      	cmp	r1, #20
 80040ec:	dd0f      	ble.n	800410e <__ieee754_pow+0xa6>
 80040ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80040f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80040f6:	fa0c f101 	lsl.w	r1, ip, r1
 80040fa:	4281      	cmp	r1, r0
 80040fc:	f040 84a1 	bne.w	8004a42 <__ieee754_pow+0x9da>
 8004100:	f00c 0c01 	and.w	ip, ip, #1
 8004104:	f1cc 0102 	rsb	r1, ip, #2
 8004108:	9100      	str	r1, [sp, #0]
 800410a:	b180      	cbz	r0, 800412e <__ieee754_pow+0xc6>
 800410c:	e059      	b.n	80041c2 <__ieee754_pow+0x15a>
 800410e:	2800      	cmp	r0, #0
 8004110:	d155      	bne.n	80041be <__ieee754_pow+0x156>
 8004112:	f1c1 0114 	rsb	r1, r1, #20
 8004116:	fa46 fc01 	asr.w	ip, r6, r1
 800411a:	fa0c f101 	lsl.w	r1, ip, r1
 800411e:	42b1      	cmp	r1, r6
 8004120:	f040 848c 	bne.w	8004a3c <__ieee754_pow+0x9d4>
 8004124:	f00c 0c01 	and.w	ip, ip, #1
 8004128:	f1cc 0102 	rsb	r1, ip, #2
 800412c:	9100      	str	r1, [sp, #0]
 800412e:	4959      	ldr	r1, [pc, #356]	; (8004294 <__ieee754_pow+0x22c>)
 8004130:	428e      	cmp	r6, r1
 8004132:	d12d      	bne.n	8004190 <__ieee754_pow+0x128>
 8004134:	2f00      	cmp	r7, #0
 8004136:	da79      	bge.n	800422c <__ieee754_pow+0x1c4>
 8004138:	4956      	ldr	r1, [pc, #344]	; (8004294 <__ieee754_pow+0x22c>)
 800413a:	2000      	movs	r0, #0
 800413c:	f7fc fb2a 	bl	8000794 <__aeabi_ddiv>
 8004140:	e016      	b.n	8004170 <__ieee754_pow+0x108>
 8004142:	2100      	movs	r1, #0
 8004144:	9100      	str	r1, [sp, #0]
 8004146:	2800      	cmp	r0, #0
 8004148:	d13b      	bne.n	80041c2 <__ieee754_pow+0x15a>
 800414a:	494f      	ldr	r1, [pc, #316]	; (8004288 <__ieee754_pow+0x220>)
 800414c:	428e      	cmp	r6, r1
 800414e:	d1ee      	bne.n	800412e <__ieee754_pow+0xc6>
 8004150:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004154:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004158:	ea53 0308 	orrs.w	r3, r3, r8
 800415c:	f000 8466 	beq.w	8004a2c <__ieee754_pow+0x9c4>
 8004160:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <__ieee754_pow+0x230>)
 8004162:	429c      	cmp	r4, r3
 8004164:	dd0d      	ble.n	8004182 <__ieee754_pow+0x11a>
 8004166:	2f00      	cmp	r7, #0
 8004168:	f280 8464 	bge.w	8004a34 <__ieee754_pow+0x9cc>
 800416c:	2000      	movs	r0, #0
 800416e:	2100      	movs	r1, #0
 8004170:	ec41 0b10 	vmov	d0, r0, r1
 8004174:	b00d      	add	sp, #52	; 0x34
 8004176:	ecbd 8b06 	vpop	{d8-d10}
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	2102      	movs	r1, #2
 8004180:	e7e0      	b.n	8004144 <__ieee754_pow+0xdc>
 8004182:	2f00      	cmp	r7, #0
 8004184:	daf2      	bge.n	800416c <__ieee754_pow+0x104>
 8004186:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800418a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800418e:	e7ef      	b.n	8004170 <__ieee754_pow+0x108>
 8004190:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004194:	d104      	bne.n	80041a0 <__ieee754_pow+0x138>
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	f7fc f9d1 	bl	8000540 <__aeabi_dmul>
 800419e:	e7e7      	b.n	8004170 <__ieee754_pow+0x108>
 80041a0:	493e      	ldr	r1, [pc, #248]	; (800429c <__ieee754_pow+0x234>)
 80041a2:	428f      	cmp	r7, r1
 80041a4:	d10d      	bne.n	80041c2 <__ieee754_pow+0x15a>
 80041a6:	f1b9 0f00 	cmp.w	r9, #0
 80041aa:	db0a      	blt.n	80041c2 <__ieee754_pow+0x15a>
 80041ac:	ec43 2b10 	vmov	d0, r2, r3
 80041b0:	b00d      	add	sp, #52	; 0x34
 80041b2:	ecbd 8b06 	vpop	{d8-d10}
 80041b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f000 bc77 	b.w	8004aac <__ieee754_sqrt>
 80041be:	2100      	movs	r1, #0
 80041c0:	9100      	str	r1, [sp, #0]
 80041c2:	ec43 2b10 	vmov	d0, r2, r3
 80041c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041ca:	f000 fd23 	bl	8004c14 <fabs>
 80041ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041d2:	ec51 0b10 	vmov	r0, r1, d0
 80041d6:	f1b8 0f00 	cmp.w	r8, #0
 80041da:	d12a      	bne.n	8004232 <__ieee754_pow+0x1ca>
 80041dc:	b12c      	cbz	r4, 80041ea <__ieee754_pow+0x182>
 80041de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8004294 <__ieee754_pow+0x22c>
 80041e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80041e6:	45e6      	cmp	lr, ip
 80041e8:	d123      	bne.n	8004232 <__ieee754_pow+0x1ca>
 80041ea:	2f00      	cmp	r7, #0
 80041ec:	da05      	bge.n	80041fa <__ieee754_pow+0x192>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	2000      	movs	r0, #0
 80041f4:	4927      	ldr	r1, [pc, #156]	; (8004294 <__ieee754_pow+0x22c>)
 80041f6:	f7fc facd 	bl	8000794 <__aeabi_ddiv>
 80041fa:	f1b9 0f00 	cmp.w	r9, #0
 80041fe:	dab7      	bge.n	8004170 <__ieee754_pow+0x108>
 8004200:	9b00      	ldr	r3, [sp, #0]
 8004202:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004206:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800420a:	4323      	orrs	r3, r4
 800420c:	d108      	bne.n	8004220 <__ieee754_pow+0x1b8>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	f7fb ffdb 	bl	80001d0 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	e78d      	b.n	800413c <__ieee754_pow+0xd4>
 8004220:	9b00      	ldr	r3, [sp, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d1a4      	bne.n	8004170 <__ieee754_pow+0x108>
 8004226:	4602      	mov	r2, r0
 8004228:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	e79e      	b.n	8004170 <__ieee754_pow+0x108>
 8004232:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8004236:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800423a:	950a      	str	r5, [sp, #40]	; 0x28
 800423c:	9d00      	ldr	r5, [sp, #0]
 800423e:	46ac      	mov	ip, r5
 8004240:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004242:	ea5c 0505 	orrs.w	r5, ip, r5
 8004246:	d0e4      	beq.n	8004212 <__ieee754_pow+0x1aa>
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <__ieee754_pow+0x238>)
 800424a:	429e      	cmp	r6, r3
 800424c:	f340 80fc 	ble.w	8004448 <__ieee754_pow+0x3e0>
 8004250:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004254:	429e      	cmp	r6, r3
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <__ieee754_pow+0x230>)
 8004258:	dd07      	ble.n	800426a <__ieee754_pow+0x202>
 800425a:	429c      	cmp	r4, r3
 800425c:	dc0a      	bgt.n	8004274 <__ieee754_pow+0x20c>
 800425e:	2f00      	cmp	r7, #0
 8004260:	da84      	bge.n	800416c <__ieee754_pow+0x104>
 8004262:	a307      	add	r3, pc, #28	; (adr r3, 8004280 <__ieee754_pow+0x218>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	e795      	b.n	8004196 <__ieee754_pow+0x12e>
 800426a:	429c      	cmp	r4, r3
 800426c:	dbf7      	blt.n	800425e <__ieee754_pow+0x1f6>
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <__ieee754_pow+0x22c>)
 8004270:	429c      	cmp	r4, r3
 8004272:	dd17      	ble.n	80042a4 <__ieee754_pow+0x23c>
 8004274:	2f00      	cmp	r7, #0
 8004276:	dcf4      	bgt.n	8004262 <__ieee754_pow+0x1fa>
 8004278:	e778      	b.n	800416c <__ieee754_pow+0x104>
 800427a:	bf00      	nop
 800427c:	f3af 8000 	nop.w
 8004280:	8800759c 	.word	0x8800759c
 8004284:	7e37e43c 	.word	0x7e37e43c
 8004288:	7ff00000 	.word	0x7ff00000
 800428c:	08004ea8 	.word	0x08004ea8
 8004290:	433fffff 	.word	0x433fffff
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	3fefffff 	.word	0x3fefffff
 800429c:	3fe00000 	.word	0x3fe00000
 80042a0:	41e00000 	.word	0x41e00000
 80042a4:	4b64      	ldr	r3, [pc, #400]	; (8004438 <__ieee754_pow+0x3d0>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f7fb ff92 	bl	80001d0 <__aeabi_dsub>
 80042ac:	a356      	add	r3, pc, #344	; (adr r3, 8004408 <__ieee754_pow+0x3a0>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	4604      	mov	r4, r0
 80042b4:	460d      	mov	r5, r1
 80042b6:	f7fc f943 	bl	8000540 <__aeabi_dmul>
 80042ba:	a355      	add	r3, pc, #340	; (adr r3, 8004410 <__ieee754_pow+0x3a8>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	4606      	mov	r6, r0
 80042c2:	460f      	mov	r7, r1
 80042c4:	4620      	mov	r0, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7fc f93a 	bl	8000540 <__aeabi_dmul>
 80042cc:	4b5b      	ldr	r3, [pc, #364]	; (800443c <__ieee754_pow+0x3d4>)
 80042ce:	4682      	mov	sl, r0
 80042d0:	468b      	mov	fp, r1
 80042d2:	2200      	movs	r2, #0
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	f7fc f932 	bl	8000540 <__aeabi_dmul>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	a14d      	add	r1, pc, #308	; (adr r1, 8004418 <__ieee754_pow+0x3b0>)
 80042e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e6:	f7fb ff73 	bl	80001d0 <__aeabi_dsub>
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	f7fc f927 	bl	8000540 <__aeabi_dmul>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	2000      	movs	r0, #0
 80042f8:	4951      	ldr	r1, [pc, #324]	; (8004440 <__ieee754_pow+0x3d8>)
 80042fa:	f7fb ff69 	bl	80001d0 <__aeabi_dsub>
 80042fe:	4622      	mov	r2, r4
 8004300:	4680      	mov	r8, r0
 8004302:	4689      	mov	r9, r1
 8004304:	462b      	mov	r3, r5
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fc f919 	bl	8000540 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4640      	mov	r0, r8
 8004314:	4649      	mov	r1, r9
 8004316:	f7fc f913 	bl	8000540 <__aeabi_dmul>
 800431a:	a341      	add	r3, pc, #260	; (adr r3, 8004420 <__ieee754_pow+0x3b8>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f7fc f90e 	bl	8000540 <__aeabi_dmul>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4650      	mov	r0, sl
 800432a:	4659      	mov	r1, fp
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4680      	mov	r8, r0
 8004336:	4689      	mov	r9, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fb ff4a 	bl	80001d4 <__adddf3>
 8004340:	2400      	movs	r4, #0
 8004342:	4632      	mov	r2, r6
 8004344:	463b      	mov	r3, r7
 8004346:	4620      	mov	r0, r4
 8004348:	460d      	mov	r5, r1
 800434a:	f7fb ff41 	bl	80001d0 <__aeabi_dsub>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4640      	mov	r0, r8
 8004354:	4649      	mov	r1, r9
 8004356:	f7fb ff3b 	bl	80001d0 <__aeabi_dsub>
 800435a:	9b00      	ldr	r3, [sp, #0]
 800435c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	4313      	orrs	r3, r2
 8004362:	4682      	mov	sl, r0
 8004364:	468b      	mov	fp, r1
 8004366:	f040 81f1 	bne.w	800474c <__ieee754_pow+0x6e4>
 800436a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8004428 <__ieee754_pow+0x3c0>
 800436e:	eeb0 8a47 	vmov.f32	s16, s14
 8004372:	eef0 8a67 	vmov.f32	s17, s15
 8004376:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800437a:	2600      	movs	r6, #0
 800437c:	4632      	mov	r2, r6
 800437e:	463b      	mov	r3, r7
 8004380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004384:	f7fb ff24 	bl	80001d0 <__aeabi_dsub>
 8004388:	4622      	mov	r2, r4
 800438a:	462b      	mov	r3, r5
 800438c:	f7fc f8d8 	bl	8000540 <__aeabi_dmul>
 8004390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004394:	4680      	mov	r8, r0
 8004396:	4689      	mov	r9, r1
 8004398:	4650      	mov	r0, sl
 800439a:	4659      	mov	r1, fp
 800439c:	f7fc f8d0 	bl	8000540 <__aeabi_dmul>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4640      	mov	r0, r8
 80043a6:	4649      	mov	r1, r9
 80043a8:	f7fb ff14 	bl	80001d4 <__adddf3>
 80043ac:	4632      	mov	r2, r6
 80043ae:	463b      	mov	r3, r7
 80043b0:	4680      	mov	r8, r0
 80043b2:	4689      	mov	r9, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc f8c2 	bl	8000540 <__aeabi_dmul>
 80043bc:	460b      	mov	r3, r1
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	4602      	mov	r2, r0
 80043c4:	4649      	mov	r1, r9
 80043c6:	4640      	mov	r0, r8
 80043c8:	f7fb ff04 	bl	80001d4 <__adddf3>
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <__ieee754_pow+0x3dc>)
 80043ce:	4299      	cmp	r1, r3
 80043d0:	ec45 4b19 	vmov	d9, r4, r5
 80043d4:	4606      	mov	r6, r0
 80043d6:	460f      	mov	r7, r1
 80043d8:	468b      	mov	fp, r1
 80043da:	f340 82fe 	ble.w	80049da <__ieee754_pow+0x972>
 80043de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80043e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80043e6:	4303      	orrs	r3, r0
 80043e8:	f000 81f0 	beq.w	80047cc <__ieee754_pow+0x764>
 80043ec:	a310      	add	r3, pc, #64	; (adr r3, 8004430 <__ieee754_pow+0x3c8>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	ec51 0b18 	vmov	r0, r1, d8
 80043f6:	f7fc f8a3 	bl	8000540 <__aeabi_dmul>
 80043fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004430 <__ieee754_pow+0x3c8>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	e6cb      	b.n	800419a <__ieee754_pow+0x132>
 8004402:	bf00      	nop
 8004404:	f3af 8000 	nop.w
 8004408:	60000000 	.word	0x60000000
 800440c:	3ff71547 	.word	0x3ff71547
 8004410:	f85ddf44 	.word	0xf85ddf44
 8004414:	3e54ae0b 	.word	0x3e54ae0b
 8004418:	55555555 	.word	0x55555555
 800441c:	3fd55555 	.word	0x3fd55555
 8004420:	652b82fe 	.word	0x652b82fe
 8004424:	3ff71547 	.word	0x3ff71547
 8004428:	00000000 	.word	0x00000000
 800442c:	bff00000 	.word	0xbff00000
 8004430:	8800759c 	.word	0x8800759c
 8004434:	7e37e43c 	.word	0x7e37e43c
 8004438:	3ff00000 	.word	0x3ff00000
 800443c:	3fd00000 	.word	0x3fd00000
 8004440:	3fe00000 	.word	0x3fe00000
 8004444:	408fffff 	.word	0x408fffff
 8004448:	4bd7      	ldr	r3, [pc, #860]	; (80047a8 <__ieee754_pow+0x740>)
 800444a:	ea03 0309 	and.w	r3, r3, r9
 800444e:	2200      	movs	r2, #0
 8004450:	b92b      	cbnz	r3, 800445e <__ieee754_pow+0x3f6>
 8004452:	4bd6      	ldr	r3, [pc, #856]	; (80047ac <__ieee754_pow+0x744>)
 8004454:	f7fc f874 	bl	8000540 <__aeabi_dmul>
 8004458:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800445c:	460c      	mov	r4, r1
 800445e:	1523      	asrs	r3, r4, #20
 8004460:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004464:	4413      	add	r3, r2
 8004466:	9309      	str	r3, [sp, #36]	; 0x24
 8004468:	4bd1      	ldr	r3, [pc, #836]	; (80047b0 <__ieee754_pow+0x748>)
 800446a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800446e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004472:	429c      	cmp	r4, r3
 8004474:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004478:	dd08      	ble.n	800448c <__ieee754_pow+0x424>
 800447a:	4bce      	ldr	r3, [pc, #824]	; (80047b4 <__ieee754_pow+0x74c>)
 800447c:	429c      	cmp	r4, r3
 800447e:	f340 8163 	ble.w	8004748 <__ieee754_pow+0x6e0>
 8004482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004484:	3301      	adds	r3, #1
 8004486:	9309      	str	r3, [sp, #36]	; 0x24
 8004488:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800448c:	2400      	movs	r4, #0
 800448e:	00e3      	lsls	r3, r4, #3
 8004490:	930b      	str	r3, [sp, #44]	; 0x2c
 8004492:	4bc9      	ldr	r3, [pc, #804]	; (80047b8 <__ieee754_pow+0x750>)
 8004494:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004498:	ed93 7b00 	vldr	d7, [r3]
 800449c:	4629      	mov	r1, r5
 800449e:	ec53 2b17 	vmov	r2, r3, d7
 80044a2:	eeb0 8a47 	vmov.f32	s16, s14
 80044a6:	eef0 8a67 	vmov.f32	s17, s15
 80044aa:	4682      	mov	sl, r0
 80044ac:	f7fb fe90 	bl	80001d0 <__aeabi_dsub>
 80044b0:	4652      	mov	r2, sl
 80044b2:	4606      	mov	r6, r0
 80044b4:	460f      	mov	r7, r1
 80044b6:	462b      	mov	r3, r5
 80044b8:	ec51 0b18 	vmov	r0, r1, d8
 80044bc:	f7fb fe8a 	bl	80001d4 <__adddf3>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	2000      	movs	r0, #0
 80044c6:	49bd      	ldr	r1, [pc, #756]	; (80047bc <__ieee754_pow+0x754>)
 80044c8:	f7fc f964 	bl	8000794 <__aeabi_ddiv>
 80044cc:	ec41 0b19 	vmov	d9, r0, r1
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4630      	mov	r0, r6
 80044d6:	4639      	mov	r1, r7
 80044d8:	f7fc f832 	bl	8000540 <__aeabi_dmul>
 80044dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9304      	str	r3, [sp, #16]
 80044ec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80044f0:	46ab      	mov	fp, r5
 80044f2:	106d      	asrs	r5, r5, #1
 80044f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80044f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80044fc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004500:	2200      	movs	r2, #0
 8004502:	4640      	mov	r0, r8
 8004504:	4649      	mov	r1, r9
 8004506:	4614      	mov	r4, r2
 8004508:	461d      	mov	r5, r3
 800450a:	f7fc f819 	bl	8000540 <__aeabi_dmul>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4630      	mov	r0, r6
 8004514:	4639      	mov	r1, r7
 8004516:	f7fb fe5b 	bl	80001d0 <__aeabi_dsub>
 800451a:	ec53 2b18 	vmov	r2, r3, d8
 800451e:	4606      	mov	r6, r0
 8004520:	460f      	mov	r7, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb fe53 	bl	80001d0 <__aeabi_dsub>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4650      	mov	r0, sl
 8004530:	4659      	mov	r1, fp
 8004532:	f7fb fe4d 	bl	80001d0 <__aeabi_dsub>
 8004536:	4642      	mov	r2, r8
 8004538:	464b      	mov	r3, r9
 800453a:	f7fc f801 	bl	8000540 <__aeabi_dmul>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fb fe43 	bl	80001d0 <__aeabi_dsub>
 800454a:	ec53 2b19 	vmov	r2, r3, d9
 800454e:	f7fb fff7 	bl	8000540 <__aeabi_dmul>
 8004552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004556:	ec41 0b18 	vmov	d8, r0, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f7fb ffef 	bl	8000540 <__aeabi_dmul>
 8004562:	a37d      	add	r3, pc, #500	; (adr r3, 8004758 <__ieee754_pow+0x6f0>)
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	4604      	mov	r4, r0
 800456a:	460d      	mov	r5, r1
 800456c:	f7fb ffe8 	bl	8000540 <__aeabi_dmul>
 8004570:	a37b      	add	r3, pc, #492	; (adr r3, 8004760 <__ieee754_pow+0x6f8>)
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f7fb fe2d 	bl	80001d4 <__adddf3>
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f7fb ffdf 	bl	8000540 <__aeabi_dmul>
 8004582:	a379      	add	r3, pc, #484	; (adr r3, 8004768 <__ieee754_pow+0x700>)
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f7fb fe24 	bl	80001d4 <__adddf3>
 800458c:	4622      	mov	r2, r4
 800458e:	462b      	mov	r3, r5
 8004590:	f7fb ffd6 	bl	8000540 <__aeabi_dmul>
 8004594:	a376      	add	r3, pc, #472	; (adr r3, 8004770 <__ieee754_pow+0x708>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fb fe1b 	bl	80001d4 <__adddf3>
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f7fb ffcd 	bl	8000540 <__aeabi_dmul>
 80045a6:	a374      	add	r3, pc, #464	; (adr r3, 8004778 <__ieee754_pow+0x710>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fb fe12 	bl	80001d4 <__adddf3>
 80045b0:	4622      	mov	r2, r4
 80045b2:	462b      	mov	r3, r5
 80045b4:	f7fb ffc4 	bl	8000540 <__aeabi_dmul>
 80045b8:	a371      	add	r3, pc, #452	; (adr r3, 8004780 <__ieee754_pow+0x718>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fb fe09 	bl	80001d4 <__adddf3>
 80045c2:	4622      	mov	r2, r4
 80045c4:	4606      	mov	r6, r0
 80045c6:	460f      	mov	r7, r1
 80045c8:	462b      	mov	r3, r5
 80045ca:	4620      	mov	r0, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	f7fb ffb7 	bl	8000540 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4630      	mov	r0, r6
 80045d8:	4639      	mov	r1, r7
 80045da:	f7fb ffb1 	bl	8000540 <__aeabi_dmul>
 80045de:	4642      	mov	r2, r8
 80045e0:	4604      	mov	r4, r0
 80045e2:	460d      	mov	r5, r1
 80045e4:	464b      	mov	r3, r9
 80045e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045ea:	f7fb fdf3 	bl	80001d4 <__adddf3>
 80045ee:	ec53 2b18 	vmov	r2, r3, d8
 80045f2:	f7fb ffa5 	bl	8000540 <__aeabi_dmul>
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	f7fb fdeb 	bl	80001d4 <__adddf3>
 80045fe:	4642      	mov	r2, r8
 8004600:	4682      	mov	sl, r0
 8004602:	468b      	mov	fp, r1
 8004604:	464b      	mov	r3, r9
 8004606:	4640      	mov	r0, r8
 8004608:	4649      	mov	r1, r9
 800460a:	f7fb ff99 	bl	8000540 <__aeabi_dmul>
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <__ieee754_pow+0x758>)
 8004610:	2200      	movs	r2, #0
 8004612:	4606      	mov	r6, r0
 8004614:	460f      	mov	r7, r1
 8004616:	f7fb fddd 	bl	80001d4 <__adddf3>
 800461a:	4652      	mov	r2, sl
 800461c:	465b      	mov	r3, fp
 800461e:	f7fb fdd9 	bl	80001d4 <__adddf3>
 8004622:	9c04      	ldr	r4, [sp, #16]
 8004624:	460d      	mov	r5, r1
 8004626:	4622      	mov	r2, r4
 8004628:	460b      	mov	r3, r1
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb ff87 	bl	8000540 <__aeabi_dmul>
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <__ieee754_pow+0x758>)
 8004634:	4680      	mov	r8, r0
 8004636:	4689      	mov	r9, r1
 8004638:	2200      	movs	r2, #0
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	f7fb fdc7 	bl	80001d0 <__aeabi_dsub>
 8004642:	4632      	mov	r2, r6
 8004644:	463b      	mov	r3, r7
 8004646:	f7fb fdc3 	bl	80001d0 <__aeabi_dsub>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4650      	mov	r0, sl
 8004650:	4659      	mov	r1, fp
 8004652:	f7fb fdbd 	bl	80001d0 <__aeabi_dsub>
 8004656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800465a:	f7fb ff71 	bl	8000540 <__aeabi_dmul>
 800465e:	4622      	mov	r2, r4
 8004660:	4606      	mov	r6, r0
 8004662:	460f      	mov	r7, r1
 8004664:	462b      	mov	r3, r5
 8004666:	ec51 0b18 	vmov	r0, r1, d8
 800466a:	f7fb ff69 	bl	8000540 <__aeabi_dmul>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4630      	mov	r0, r6
 8004674:	4639      	mov	r1, r7
 8004676:	f7fb fdad 	bl	80001d4 <__adddf3>
 800467a:	4606      	mov	r6, r0
 800467c:	460f      	mov	r7, r1
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4640      	mov	r0, r8
 8004684:	4649      	mov	r1, r9
 8004686:	f7fb fda5 	bl	80001d4 <__adddf3>
 800468a:	9c04      	ldr	r4, [sp, #16]
 800468c:	a33e      	add	r3, pc, #248	; (adr r3, 8004788 <__ieee754_pow+0x720>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	4620      	mov	r0, r4
 8004694:	460d      	mov	r5, r1
 8004696:	f7fb ff53 	bl	8000540 <__aeabi_dmul>
 800469a:	4642      	mov	r2, r8
 800469c:	ec41 0b18 	vmov	d8, r0, r1
 80046a0:	464b      	mov	r3, r9
 80046a2:	4620      	mov	r0, r4
 80046a4:	4629      	mov	r1, r5
 80046a6:	f7fb fd93 	bl	80001d0 <__aeabi_dsub>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4630      	mov	r0, r6
 80046b0:	4639      	mov	r1, r7
 80046b2:	f7fb fd8d 	bl	80001d0 <__aeabi_dsub>
 80046b6:	a336      	add	r3, pc, #216	; (adr r3, 8004790 <__ieee754_pow+0x728>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb ff40 	bl	8000540 <__aeabi_dmul>
 80046c0:	a335      	add	r3, pc, #212	; (adr r3, 8004798 <__ieee754_pow+0x730>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	4606      	mov	r6, r0
 80046c8:	460f      	mov	r7, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fb ff37 	bl	8000540 <__aeabi_dmul>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4630      	mov	r0, r6
 80046d8:	4639      	mov	r1, r7
 80046da:	f7fb fd7b 	bl	80001d4 <__adddf3>
 80046de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046e0:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <__ieee754_pow+0x75c>)
 80046e2:	4413      	add	r3, r2
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f7fb fd74 	bl	80001d4 <__adddf3>
 80046ec:	4682      	mov	sl, r0
 80046ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046f0:	468b      	mov	fp, r1
 80046f2:	f7fb febb 	bl	800046c <__aeabi_i2d>
 80046f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <__ieee754_pow+0x760>)
 80046fa:	4413      	add	r3, r2
 80046fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004700:	4606      	mov	r6, r0
 8004702:	460f      	mov	r7, r1
 8004704:	4652      	mov	r2, sl
 8004706:	465b      	mov	r3, fp
 8004708:	ec51 0b18 	vmov	r0, r1, d8
 800470c:	f7fb fd62 	bl	80001d4 <__adddf3>
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	f7fb fd5e 	bl	80001d4 <__adddf3>
 8004718:	4632      	mov	r2, r6
 800471a:	463b      	mov	r3, r7
 800471c:	f7fb fd5a 	bl	80001d4 <__adddf3>
 8004720:	9c04      	ldr	r4, [sp, #16]
 8004722:	4632      	mov	r2, r6
 8004724:	463b      	mov	r3, r7
 8004726:	4620      	mov	r0, r4
 8004728:	460d      	mov	r5, r1
 800472a:	f7fb fd51 	bl	80001d0 <__aeabi_dsub>
 800472e:	4642      	mov	r2, r8
 8004730:	464b      	mov	r3, r9
 8004732:	f7fb fd4d 	bl	80001d0 <__aeabi_dsub>
 8004736:	ec53 2b18 	vmov	r2, r3, d8
 800473a:	f7fb fd49 	bl	80001d0 <__aeabi_dsub>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4650      	mov	r0, sl
 8004744:	4659      	mov	r1, fp
 8004746:	e606      	b.n	8004356 <__ieee754_pow+0x2ee>
 8004748:	2401      	movs	r4, #1
 800474a:	e6a0      	b.n	800448e <__ieee754_pow+0x426>
 800474c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80047a0 <__ieee754_pow+0x738>
 8004750:	e60d      	b.n	800436e <__ieee754_pow+0x306>
 8004752:	bf00      	nop
 8004754:	f3af 8000 	nop.w
 8004758:	4a454eef 	.word	0x4a454eef
 800475c:	3fca7e28 	.word	0x3fca7e28
 8004760:	93c9db65 	.word	0x93c9db65
 8004764:	3fcd864a 	.word	0x3fcd864a
 8004768:	a91d4101 	.word	0xa91d4101
 800476c:	3fd17460 	.word	0x3fd17460
 8004770:	518f264d 	.word	0x518f264d
 8004774:	3fd55555 	.word	0x3fd55555
 8004778:	db6fabff 	.word	0xdb6fabff
 800477c:	3fdb6db6 	.word	0x3fdb6db6
 8004780:	33333303 	.word	0x33333303
 8004784:	3fe33333 	.word	0x3fe33333
 8004788:	e0000000 	.word	0xe0000000
 800478c:	3feec709 	.word	0x3feec709
 8004790:	dc3a03fd 	.word	0xdc3a03fd
 8004794:	3feec709 	.word	0x3feec709
 8004798:	145b01f5 	.word	0x145b01f5
 800479c:	be3e2fe0 	.word	0xbe3e2fe0
 80047a0:	00000000 	.word	0x00000000
 80047a4:	3ff00000 	.word	0x3ff00000
 80047a8:	7ff00000 	.word	0x7ff00000
 80047ac:	43400000 	.word	0x43400000
 80047b0:	0003988e 	.word	0x0003988e
 80047b4:	000bb679 	.word	0x000bb679
 80047b8:	08004eb0 	.word	0x08004eb0
 80047bc:	3ff00000 	.word	0x3ff00000
 80047c0:	40080000 	.word	0x40080000
 80047c4:	08004ed0 	.word	0x08004ed0
 80047c8:	08004ec0 	.word	0x08004ec0
 80047cc:	a3b5      	add	r3, pc, #724	; (adr r3, 8004aa4 <__ieee754_pow+0xa3c>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	4640      	mov	r0, r8
 80047d4:	4649      	mov	r1, r9
 80047d6:	f7fb fcfd 	bl	80001d4 <__adddf3>
 80047da:	4622      	mov	r2, r4
 80047dc:	ec41 0b1a 	vmov	d10, r0, r1
 80047e0:	462b      	mov	r3, r5
 80047e2:	4630      	mov	r0, r6
 80047e4:	4639      	mov	r1, r7
 80047e6:	f7fb fcf3 	bl	80001d0 <__aeabi_dsub>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	ec51 0b1a 	vmov	r0, r1, d10
 80047f2:	f7fc f935 	bl	8000a60 <__aeabi_dcmpgt>
 80047f6:	2800      	cmp	r0, #0
 80047f8:	f47f adf8 	bne.w	80043ec <__ieee754_pow+0x384>
 80047fc:	4aa4      	ldr	r2, [pc, #656]	; (8004a90 <__ieee754_pow+0xa28>)
 80047fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004802:	4293      	cmp	r3, r2
 8004804:	f340 810b 	ble.w	8004a1e <__ieee754_pow+0x9b6>
 8004808:	151b      	asrs	r3, r3, #20
 800480a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800480e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004812:	fa4a f303 	asr.w	r3, sl, r3
 8004816:	445b      	add	r3, fp
 8004818:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800481c:	4e9d      	ldr	r6, [pc, #628]	; (8004a94 <__ieee754_pow+0xa2c>)
 800481e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004822:	4116      	asrs	r6, r2
 8004824:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004828:	2000      	movs	r0, #0
 800482a:	ea23 0106 	bic.w	r1, r3, r6
 800482e:	f1c2 0214 	rsb	r2, r2, #20
 8004832:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004836:	fa4a fa02 	asr.w	sl, sl, r2
 800483a:	f1bb 0f00 	cmp.w	fp, #0
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4620      	mov	r0, r4
 8004844:	4629      	mov	r1, r5
 8004846:	bfb8      	it	lt
 8004848:	f1ca 0a00 	rsblt	sl, sl, #0
 800484c:	f7fb fcc0 	bl	80001d0 <__aeabi_dsub>
 8004850:	ec41 0b19 	vmov	d9, r0, r1
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	ec51 0b19 	vmov	r0, r1, d9
 800485c:	f7fb fcba 	bl	80001d4 <__adddf3>
 8004860:	2400      	movs	r4, #0
 8004862:	a379      	add	r3, pc, #484	; (adr r3, 8004a48 <__ieee754_pow+0x9e0>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	4620      	mov	r0, r4
 800486a:	460d      	mov	r5, r1
 800486c:	f7fb fe68 	bl	8000540 <__aeabi_dmul>
 8004870:	ec53 2b19 	vmov	r2, r3, d9
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	4620      	mov	r0, r4
 800487a:	4629      	mov	r1, r5
 800487c:	f7fb fca8 	bl	80001d0 <__aeabi_dsub>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4640      	mov	r0, r8
 8004886:	4649      	mov	r1, r9
 8004888:	f7fb fca2 	bl	80001d0 <__aeabi_dsub>
 800488c:	a370      	add	r3, pc, #448	; (adr r3, 8004a50 <__ieee754_pow+0x9e8>)
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f7fb fe55 	bl	8000540 <__aeabi_dmul>
 8004896:	a370      	add	r3, pc, #448	; (adr r3, 8004a58 <__ieee754_pow+0x9f0>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	4680      	mov	r8, r0
 800489e:	4689      	mov	r9, r1
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fb fe4c 	bl	8000540 <__aeabi_dmul>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4640      	mov	r0, r8
 80048ae:	4649      	mov	r1, r9
 80048b0:	f7fb fc90 	bl	80001d4 <__adddf3>
 80048b4:	4604      	mov	r4, r0
 80048b6:	460d      	mov	r5, r1
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4630      	mov	r0, r6
 80048be:	4639      	mov	r1, r7
 80048c0:	f7fb fc88 	bl	80001d4 <__adddf3>
 80048c4:	4632      	mov	r2, r6
 80048c6:	463b      	mov	r3, r7
 80048c8:	4680      	mov	r8, r0
 80048ca:	4689      	mov	r9, r1
 80048cc:	f7fb fc80 	bl	80001d0 <__aeabi_dsub>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fc7a 	bl	80001d0 <__aeabi_dsub>
 80048dc:	4642      	mov	r2, r8
 80048de:	4606      	mov	r6, r0
 80048e0:	460f      	mov	r7, r1
 80048e2:	464b      	mov	r3, r9
 80048e4:	4640      	mov	r0, r8
 80048e6:	4649      	mov	r1, r9
 80048e8:	f7fb fe2a 	bl	8000540 <__aeabi_dmul>
 80048ec:	a35c      	add	r3, pc, #368	; (adr r3, 8004a60 <__ieee754_pow+0x9f8>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	4604      	mov	r4, r0
 80048f4:	460d      	mov	r5, r1
 80048f6:	f7fb fe23 	bl	8000540 <__aeabi_dmul>
 80048fa:	a35b      	add	r3, pc, #364	; (adr r3, 8004a68 <__ieee754_pow+0xa00>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fc66 	bl	80001d0 <__aeabi_dsub>
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	f7fb fe1a 	bl	8000540 <__aeabi_dmul>
 800490c:	a358      	add	r3, pc, #352	; (adr r3, 8004a70 <__ieee754_pow+0xa08>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fc5f 	bl	80001d4 <__adddf3>
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f7fb fe11 	bl	8000540 <__aeabi_dmul>
 800491e:	a356      	add	r3, pc, #344	; (adr r3, 8004a78 <__ieee754_pow+0xa10>)
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	f7fb fc54 	bl	80001d0 <__aeabi_dsub>
 8004928:	4622      	mov	r2, r4
 800492a:	462b      	mov	r3, r5
 800492c:	f7fb fe08 	bl	8000540 <__aeabi_dmul>
 8004930:	a353      	add	r3, pc, #332	; (adr r3, 8004a80 <__ieee754_pow+0xa18>)
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	f7fb fc4d 	bl	80001d4 <__adddf3>
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f7fb fdff 	bl	8000540 <__aeabi_dmul>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4640      	mov	r0, r8
 8004948:	4649      	mov	r1, r9
 800494a:	f7fb fc41 	bl	80001d0 <__aeabi_dsub>
 800494e:	4604      	mov	r4, r0
 8004950:	460d      	mov	r5, r1
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fb fdf1 	bl	8000540 <__aeabi_dmul>
 800495e:	2200      	movs	r2, #0
 8004960:	ec41 0b19 	vmov	d9, r0, r1
 8004964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	f7fb fc30 	bl	80001d0 <__aeabi_dsub>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	ec51 0b19 	vmov	r0, r1, d9
 8004978:	f7fb ff0c 	bl	8000794 <__aeabi_ddiv>
 800497c:	4632      	mov	r2, r6
 800497e:	4604      	mov	r4, r0
 8004980:	460d      	mov	r5, r1
 8004982:	463b      	mov	r3, r7
 8004984:	4640      	mov	r0, r8
 8004986:	4649      	mov	r1, r9
 8004988:	f7fb fdda 	bl	8000540 <__aeabi_dmul>
 800498c:	4632      	mov	r2, r6
 800498e:	463b      	mov	r3, r7
 8004990:	f7fb fc20 	bl	80001d4 <__adddf3>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fc18 	bl	80001d0 <__aeabi_dsub>
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	f7fb fc14 	bl	80001d0 <__aeabi_dsub>
 80049a8:	460b      	mov	r3, r1
 80049aa:	4602      	mov	r2, r0
 80049ac:	493a      	ldr	r1, [pc, #232]	; (8004a98 <__ieee754_pow+0xa30>)
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fb fc0e 	bl	80001d0 <__aeabi_dsub>
 80049b4:	e9cd 0100 	strd	r0, r1, [sp]
 80049b8:	9b01      	ldr	r3, [sp, #4]
 80049ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	da2f      	bge.n	8004a24 <__ieee754_pow+0x9bc>
 80049c4:	4650      	mov	r0, sl
 80049c6:	ed9d 0b00 	vldr	d0, [sp]
 80049ca:	f000 f9cd 	bl	8004d68 <scalbn>
 80049ce:	ec51 0b10 	vmov	r0, r1, d0
 80049d2:	ec53 2b18 	vmov	r2, r3, d8
 80049d6:	f7ff bbe0 	b.w	800419a <__ieee754_pow+0x132>
 80049da:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <__ieee754_pow+0xa34>)
 80049dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80049e0:	429e      	cmp	r6, r3
 80049e2:	f77f af0b 	ble.w	80047fc <__ieee754_pow+0x794>
 80049e6:	4b2e      	ldr	r3, [pc, #184]	; (8004aa0 <__ieee754_pow+0xa38>)
 80049e8:	440b      	add	r3, r1
 80049ea:	4303      	orrs	r3, r0
 80049ec:	d00b      	beq.n	8004a06 <__ieee754_pow+0x99e>
 80049ee:	a326      	add	r3, pc, #152	; (adr r3, 8004a88 <__ieee754_pow+0xa20>)
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	ec51 0b18 	vmov	r0, r1, d8
 80049f8:	f7fb fda2 	bl	8000540 <__aeabi_dmul>
 80049fc:	a322      	add	r3, pc, #136	; (adr r3, 8004a88 <__ieee754_pow+0xa20>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7ff bbca 	b.w	800419a <__ieee754_pow+0x132>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb fbe1 	bl	80001d0 <__aeabi_dsub>
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	f7fc f81b 	bl	8000a4c <__aeabi_dcmpge>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	f43f aef0 	beq.w	80047fc <__ieee754_pow+0x794>
 8004a1c:	e7e7      	b.n	80049ee <__ieee754_pow+0x986>
 8004a1e:	f04f 0a00 	mov.w	sl, #0
 8004a22:	e717      	b.n	8004854 <__ieee754_pow+0x7ec>
 8004a24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	e7d2      	b.n	80049d2 <__ieee754_pow+0x96a>
 8004a2c:	491a      	ldr	r1, [pc, #104]	; (8004a98 <__ieee754_pow+0xa30>)
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f7ff bb9e 	b.w	8004170 <__ieee754_pow+0x108>
 8004a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a38:	f7ff bb9a 	b.w	8004170 <__ieee754_pow+0x108>
 8004a3c:	9000      	str	r0, [sp, #0]
 8004a3e:	f7ff bb76 	b.w	800412e <__ieee754_pow+0xc6>
 8004a42:	2100      	movs	r1, #0
 8004a44:	f7ff bb60 	b.w	8004108 <__ieee754_pow+0xa0>
 8004a48:	00000000 	.word	0x00000000
 8004a4c:	3fe62e43 	.word	0x3fe62e43
 8004a50:	fefa39ef 	.word	0xfefa39ef
 8004a54:	3fe62e42 	.word	0x3fe62e42
 8004a58:	0ca86c39 	.word	0x0ca86c39
 8004a5c:	be205c61 	.word	0xbe205c61
 8004a60:	72bea4d0 	.word	0x72bea4d0
 8004a64:	3e663769 	.word	0x3e663769
 8004a68:	c5d26bf1 	.word	0xc5d26bf1
 8004a6c:	3ebbbd41 	.word	0x3ebbbd41
 8004a70:	af25de2c 	.word	0xaf25de2c
 8004a74:	3f11566a 	.word	0x3f11566a
 8004a78:	16bebd93 	.word	0x16bebd93
 8004a7c:	3f66c16c 	.word	0x3f66c16c
 8004a80:	5555553e 	.word	0x5555553e
 8004a84:	3fc55555 	.word	0x3fc55555
 8004a88:	c2f8f359 	.word	0xc2f8f359
 8004a8c:	01a56e1f 	.word	0x01a56e1f
 8004a90:	3fe00000 	.word	0x3fe00000
 8004a94:	000fffff 	.word	0x000fffff
 8004a98:	3ff00000 	.word	0x3ff00000
 8004a9c:	4090cbff 	.word	0x4090cbff
 8004aa0:	3f6f3400 	.word	0x3f6f3400
 8004aa4:	652b82fe 	.word	0x652b82fe
 8004aa8:	3c971547 	.word	0x3c971547

08004aac <__ieee754_sqrt>:
 8004aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab0:	ec55 4b10 	vmov	r4, r5, d0
 8004ab4:	4e56      	ldr	r6, [pc, #344]	; (8004c10 <__ieee754_sqrt+0x164>)
 8004ab6:	43ae      	bics	r6, r5
 8004ab8:	ee10 0a10 	vmov	r0, s0
 8004abc:	ee10 3a10 	vmov	r3, s0
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	462a      	mov	r2, r5
 8004ac4:	d110      	bne.n	8004ae8 <__ieee754_sqrt+0x3c>
 8004ac6:	ee10 2a10 	vmov	r2, s0
 8004aca:	462b      	mov	r3, r5
 8004acc:	f7fb fd38 	bl	8000540 <__aeabi_dmul>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	f7fb fb7c 	bl	80001d4 <__adddf3>
 8004adc:	4604      	mov	r4, r0
 8004ade:	460d      	mov	r5, r1
 8004ae0:	ec45 4b10 	vmov	d0, r4, r5
 8004ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	dc10      	bgt.n	8004b0e <__ieee754_sqrt+0x62>
 8004aec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004af0:	4330      	orrs	r0, r6
 8004af2:	d0f5      	beq.n	8004ae0 <__ieee754_sqrt+0x34>
 8004af4:	b15d      	cbz	r5, 8004b0e <__ieee754_sqrt+0x62>
 8004af6:	ee10 2a10 	vmov	r2, s0
 8004afa:	462b      	mov	r3, r5
 8004afc:	ee10 0a10 	vmov	r0, s0
 8004b00:	f7fb fb66 	bl	80001d0 <__aeabi_dsub>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	f7fb fe44 	bl	8000794 <__aeabi_ddiv>
 8004b0c:	e7e6      	b.n	8004adc <__ieee754_sqrt+0x30>
 8004b0e:	1509      	asrs	r1, r1, #20
 8004b10:	d076      	beq.n	8004c00 <__ieee754_sqrt+0x154>
 8004b12:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004b16:	07ce      	lsls	r6, r1, #31
 8004b18:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8004b1c:	bf5e      	ittt	pl
 8004b1e:	0fda      	lsrpl	r2, r3, #31
 8004b20:	005b      	lslpl	r3, r3, #1
 8004b22:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8004b26:	0fda      	lsrs	r2, r3, #31
 8004b28:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8004b2c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004b30:	2000      	movs	r0, #0
 8004b32:	106d      	asrs	r5, r5, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	f04f 0e16 	mov.w	lr, #22
 8004b3a:	4684      	mov	ip, r0
 8004b3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b40:	eb0c 0401 	add.w	r4, ip, r1
 8004b44:	4294      	cmp	r4, r2
 8004b46:	bfde      	ittt	le
 8004b48:	1b12      	suble	r2, r2, r4
 8004b4a:	eb04 0c01 	addle.w	ip, r4, r1
 8004b4e:	1840      	addle	r0, r0, r1
 8004b50:	0052      	lsls	r2, r2, #1
 8004b52:	f1be 0e01 	subs.w	lr, lr, #1
 8004b56:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004b5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004b5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b62:	d1ed      	bne.n	8004b40 <__ieee754_sqrt+0x94>
 8004b64:	4671      	mov	r1, lr
 8004b66:	2720      	movs	r7, #32
 8004b68:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b6c:	4562      	cmp	r2, ip
 8004b6e:	eb04 060e 	add.w	r6, r4, lr
 8004b72:	dc02      	bgt.n	8004b7a <__ieee754_sqrt+0xce>
 8004b74:	d113      	bne.n	8004b9e <__ieee754_sqrt+0xf2>
 8004b76:	429e      	cmp	r6, r3
 8004b78:	d811      	bhi.n	8004b9e <__ieee754_sqrt+0xf2>
 8004b7a:	2e00      	cmp	r6, #0
 8004b7c:	eb06 0e04 	add.w	lr, r6, r4
 8004b80:	da43      	bge.n	8004c0a <__ieee754_sqrt+0x15e>
 8004b82:	f1be 0f00 	cmp.w	lr, #0
 8004b86:	db40      	blt.n	8004c0a <__ieee754_sqrt+0x15e>
 8004b88:	f10c 0801 	add.w	r8, ip, #1
 8004b8c:	eba2 020c 	sub.w	r2, r2, ip
 8004b90:	429e      	cmp	r6, r3
 8004b92:	bf88      	it	hi
 8004b94:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8004b98:	1b9b      	subs	r3, r3, r6
 8004b9a:	4421      	add	r1, r4
 8004b9c:	46c4      	mov	ip, r8
 8004b9e:	0052      	lsls	r2, r2, #1
 8004ba0:	3f01      	subs	r7, #1
 8004ba2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004ba6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004baa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004bae:	d1dd      	bne.n	8004b6c <__ieee754_sqrt+0xc0>
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d006      	beq.n	8004bc2 <__ieee754_sqrt+0x116>
 8004bb4:	1c4c      	adds	r4, r1, #1
 8004bb6:	bf13      	iteet	ne
 8004bb8:	3101      	addne	r1, #1
 8004bba:	3001      	addeq	r0, #1
 8004bbc:	4639      	moveq	r1, r7
 8004bbe:	f021 0101 	bicne.w	r1, r1, #1
 8004bc2:	1043      	asrs	r3, r0, #1
 8004bc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004bc8:	0849      	lsrs	r1, r1, #1
 8004bca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004bce:	07c2      	lsls	r2, r0, #31
 8004bd0:	bf48      	it	mi
 8004bd2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8004bd6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8004bda:	460c      	mov	r4, r1
 8004bdc:	463d      	mov	r5, r7
 8004bde:	e77f      	b.n	8004ae0 <__ieee754_sqrt+0x34>
 8004be0:	0ada      	lsrs	r2, r3, #11
 8004be2:	3815      	subs	r0, #21
 8004be4:	055b      	lsls	r3, r3, #21
 8004be6:	2a00      	cmp	r2, #0
 8004be8:	d0fa      	beq.n	8004be0 <__ieee754_sqrt+0x134>
 8004bea:	02d7      	lsls	r7, r2, #11
 8004bec:	d50a      	bpl.n	8004c04 <__ieee754_sqrt+0x158>
 8004bee:	f1c1 0420 	rsb	r4, r1, #32
 8004bf2:	fa23 f404 	lsr.w	r4, r3, r4
 8004bf6:	1e4d      	subs	r5, r1, #1
 8004bf8:	408b      	lsls	r3, r1
 8004bfa:	4322      	orrs	r2, r4
 8004bfc:	1b41      	subs	r1, r0, r5
 8004bfe:	e788      	b.n	8004b12 <__ieee754_sqrt+0x66>
 8004c00:	4608      	mov	r0, r1
 8004c02:	e7f0      	b.n	8004be6 <__ieee754_sqrt+0x13a>
 8004c04:	0052      	lsls	r2, r2, #1
 8004c06:	3101      	adds	r1, #1
 8004c08:	e7ef      	b.n	8004bea <__ieee754_sqrt+0x13e>
 8004c0a:	46e0      	mov	r8, ip
 8004c0c:	e7be      	b.n	8004b8c <__ieee754_sqrt+0xe0>
 8004c0e:	bf00      	nop
 8004c10:	7ff00000 	.word	0x7ff00000

08004c14 <fabs>:
 8004c14:	ec51 0b10 	vmov	r0, r1, d0
 8004c18:	ee10 2a10 	vmov	r2, s0
 8004c1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c20:	ec43 2b10 	vmov	d0, r2, r3
 8004c24:	4770      	bx	lr

08004c26 <finite>:
 8004c26:	b082      	sub	sp, #8
 8004c28:	ed8d 0b00 	vstr	d0, [sp]
 8004c2c:	9801      	ldr	r0, [sp, #4]
 8004c2e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004c32:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004c36:	0fc0      	lsrs	r0, r0, #31
 8004c38:	b002      	add	sp, #8
 8004c3a:	4770      	bx	lr
 8004c3c:	0000      	movs	r0, r0
	...

08004c40 <nan>:
 8004c40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004c48 <nan+0x8>
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	00000000 	.word	0x00000000
 8004c4c:	7ff80000 	.word	0x7ff80000

08004c50 <rint>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	ec51 0b10 	vmov	r0, r1, d0
 8004c56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c5a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004c5e:	2e13      	cmp	r6, #19
 8004c60:	ee10 4a10 	vmov	r4, s0
 8004c64:	460b      	mov	r3, r1
 8004c66:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004c6a:	dc58      	bgt.n	8004d1e <rint+0xce>
 8004c6c:	2e00      	cmp	r6, #0
 8004c6e:	da2b      	bge.n	8004cc8 <rint+0x78>
 8004c70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004c74:	4302      	orrs	r2, r0
 8004c76:	d023      	beq.n	8004cc0 <rint+0x70>
 8004c78:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004c7c:	4302      	orrs	r2, r0
 8004c7e:	4254      	negs	r4, r2
 8004c80:	4314      	orrs	r4, r2
 8004c82:	0c4b      	lsrs	r3, r1, #17
 8004c84:	0b24      	lsrs	r4, r4, #12
 8004c86:	045b      	lsls	r3, r3, #17
 8004c88:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004c8c:	ea44 0103 	orr.w	r1, r4, r3
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <rint+0x10c>)
 8004c92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004c96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	f7fb fa97 	bl	80001d4 <__adddf3>
 8004ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8004caa:	463b      	mov	r3, r7
 8004cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	f7fb fa8d 	bl	80001d0 <__aeabi_dsub>
 8004cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	ec41 0b10 	vmov	d0, r0, r1
 8004cc4:	b003      	add	sp, #12
 8004cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc8:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <rint+0x110>)
 8004cca:	4132      	asrs	r2, r6
 8004ccc:	ea01 0702 	and.w	r7, r1, r2
 8004cd0:	4307      	orrs	r7, r0
 8004cd2:	d0f5      	beq.n	8004cc0 <rint+0x70>
 8004cd4:	0851      	lsrs	r1, r2, #1
 8004cd6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8004cda:	4314      	orrs	r4, r2
 8004cdc:	d00c      	beq.n	8004cf8 <rint+0xa8>
 8004cde:	ea23 0201 	bic.w	r2, r3, r1
 8004ce2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ce6:	2e13      	cmp	r6, #19
 8004ce8:	fa43 f606 	asr.w	r6, r3, r6
 8004cec:	bf0c      	ite	eq
 8004cee:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004cf2:	2400      	movne	r4, #0
 8004cf4:	ea42 0306 	orr.w	r3, r2, r6
 8004cf8:	4918      	ldr	r1, [pc, #96]	; (8004d5c <rint+0x10c>)
 8004cfa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004cfe:	4622      	mov	r2, r4
 8004d00:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d04:	4620      	mov	r0, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7fb fa64 	bl	80001d4 <__adddf3>
 8004d0c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d14:	4622      	mov	r2, r4
 8004d16:	462b      	mov	r3, r5
 8004d18:	f7fb fa5a 	bl	80001d0 <__aeabi_dsub>
 8004d1c:	e7d0      	b.n	8004cc0 <rint+0x70>
 8004d1e:	2e33      	cmp	r6, #51	; 0x33
 8004d20:	dd07      	ble.n	8004d32 <rint+0xe2>
 8004d22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004d26:	d1cb      	bne.n	8004cc0 <rint+0x70>
 8004d28:	ee10 2a10 	vmov	r2, s0
 8004d2c:	f7fb fa52 	bl	80001d4 <__adddf3>
 8004d30:	e7c6      	b.n	8004cc0 <rint+0x70>
 8004d32:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8004d36:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004d3a:	40d6      	lsrs	r6, r2
 8004d3c:	4230      	tst	r0, r6
 8004d3e:	d0bf      	beq.n	8004cc0 <rint+0x70>
 8004d40:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8004d44:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8004d48:	bf1f      	itttt	ne
 8004d4a:	ea24 0101 	bicne.w	r1, r4, r1
 8004d4e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004d52:	fa44 f202 	asrne.w	r2, r4, r2
 8004d56:	ea41 0402 	orrne.w	r4, r1, r2
 8004d5a:	e7cd      	b.n	8004cf8 <rint+0xa8>
 8004d5c:	08004ee0 	.word	0x08004ee0
 8004d60:	000fffff 	.word	0x000fffff
 8004d64:	00000000 	.word	0x00000000

08004d68 <scalbn>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	ec55 4b10 	vmov	r4, r5, d0
 8004d6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004d72:	4606      	mov	r6, r0
 8004d74:	462b      	mov	r3, r5
 8004d76:	b99a      	cbnz	r2, 8004da0 <scalbn+0x38>
 8004d78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	d036      	beq.n	8004dee <scalbn+0x86>
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <scalbn+0x100>)
 8004d82:	4629      	mov	r1, r5
 8004d84:	ee10 0a10 	vmov	r0, s0
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f7fb fbd9 	bl	8000540 <__aeabi_dmul>
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <scalbn+0x104>)
 8004d90:	429e      	cmp	r6, r3
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	da10      	bge.n	8004dba <scalbn+0x52>
 8004d98:	a32b      	add	r3, pc, #172	; (adr r3, 8004e48 <scalbn+0xe0>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	e03a      	b.n	8004e16 <scalbn+0xae>
 8004da0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004da4:	428a      	cmp	r2, r1
 8004da6:	d10c      	bne.n	8004dc2 <scalbn+0x5a>
 8004da8:	ee10 2a10 	vmov	r2, s0
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fa10 	bl	80001d4 <__adddf3>
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	e019      	b.n	8004dee <scalbn+0x86>
 8004dba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	3a36      	subs	r2, #54	; 0x36
 8004dc2:	4432      	add	r2, r6
 8004dc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	dd08      	ble.n	8004dde <scalbn+0x76>
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	a120      	add	r1, pc, #128	; (adr r1, 8004e50 <scalbn+0xe8>)
 8004dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dd4:	da1c      	bge.n	8004e10 <scalbn+0xa8>
 8004dd6:	a120      	add	r1, pc, #128	; (adr r1, 8004e58 <scalbn+0xf0>)
 8004dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ddc:	e018      	b.n	8004e10 <scalbn+0xa8>
 8004dde:	2a00      	cmp	r2, #0
 8004de0:	dd08      	ble.n	8004df4 <scalbn+0x8c>
 8004de2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004dee:	ec45 4b10 	vmov	d0, r4, r5
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004df8:	da19      	bge.n	8004e2e <scalbn+0xc6>
 8004dfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004dfe:	429e      	cmp	r6, r3
 8004e00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004e04:	dd0a      	ble.n	8004e1c <scalbn+0xb4>
 8004e06:	a112      	add	r1, pc, #72	; (adr r1, 8004e50 <scalbn+0xe8>)
 8004e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e2      	bne.n	8004dd6 <scalbn+0x6e>
 8004e10:	a30f      	add	r3, pc, #60	; (adr r3, 8004e50 <scalbn+0xe8>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fb93 	bl	8000540 <__aeabi_dmul>
 8004e1a:	e7cb      	b.n	8004db4 <scalbn+0x4c>
 8004e1c:	a10a      	add	r1, pc, #40	; (adr r1, 8004e48 <scalbn+0xe0>)
 8004e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0b8      	beq.n	8004d98 <scalbn+0x30>
 8004e26:	a10e      	add	r1, pc, #56	; (adr r1, 8004e60 <scalbn+0xf8>)
 8004e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e2c:	e7b4      	b.n	8004d98 <scalbn+0x30>
 8004e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e32:	3236      	adds	r2, #54	; 0x36
 8004e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <scalbn+0x108>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	e7e8      	b.n	8004e16 <scalbn+0xae>
 8004e44:	f3af 8000 	nop.w
 8004e48:	c2f8f359 	.word	0xc2f8f359
 8004e4c:	01a56e1f 	.word	0x01a56e1f
 8004e50:	8800759c 	.word	0x8800759c
 8004e54:	7e37e43c 	.word	0x7e37e43c
 8004e58:	8800759c 	.word	0x8800759c
 8004e5c:	fe37e43c 	.word	0xfe37e43c
 8004e60:	c2f8f359 	.word	0xc2f8f359
 8004e64:	81a56e1f 	.word	0x81a56e1f
 8004e68:	43500000 	.word	0x43500000
 8004e6c:	ffff3cb0 	.word	0xffff3cb0
 8004e70:	3c900000 	.word	0x3c900000

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
